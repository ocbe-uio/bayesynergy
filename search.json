[{"path":"https://ocbe-uio.github.io/bayesynergy/articles/Advanced_topics.html","id":"diagnosing-errors-and-warnings","dir":"Articles","previous_headings":"","what":"Diagnosing errors and warnings","title":"Advanced topics","text":"Sometimes, bayesynergy function may return warning. Ideally, don’t want warnings , examined closely, posterior samples unreliable. Usually, warning tell user fix problem hand, e.g. running chains longer (set iter higher), setting adapt_delta higher. See [https://mc-stan.org/misc/warnings.html] general tips.","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/articles/Advanced_topics.html","id":"divergent-transitions","dir":"Articles","previous_headings":"Diagnosing errors and warnings","what":"Divergent Transitions","title":"Advanced topics","text":"commonly, sampler might complain divergent transitions. warning typically look like : indicative posterior geometry tricky explore. case divergent transitions, usual trick set adapt_delta higher value, .e. larger 0.9 default. can done control option bayesynergy call: However, case , 2316 divergent transitions, indicative misspecified model. experience, can happen reasons. .e. parameter \\(l\\) close one. can effect making monotherapy parameters unidentifiable. can usually alleviated setting lower_asymptotes = FALSE call. Unless one specifically interested parameters, reason estimate – model fit typically still good without . model can struggle setting, particularly none replicates. choose homoscedastic model instead. sometimes setting \\(\\lambda\\) much lower initial setting can help better fit. particularly true viability scores close zero (negative) truncated set exactly zero.","code":"## Warning: There were 2316 divergent transitions after warmup. See ## http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup ## to find out why this is a problem and how to eliminate them. fit = bayesynergy(y, x, control = list(adapt_delta = 0.99))"},{"path":"https://ocbe-uio.github.io/bayesynergy/articles/Advanced_topics.html","id":"robustness-against-outliers","dir":"Articles","previous_headings":"","what":"Robustness against outliers","title":"Advanced topics","text":"provide version model robust inevitable outliers dose=response data. done swapping two components model formulation, likelihood prior kernel hyperparameters. likelihood, utilise log-Pareto-tailed Normal (LPTN) distribution mean \\(\\mu\\) standard deviation \\(\\sigma\\), described Gagnon, Desgagné, Bédard (2020) takes form \\[ f(x)= \\begin{cases} \\frac{1}{\\sigma}\\phi\\left(\\frac{x-\\mu}{\\sigma}\\right) & \\text{} \\vert\\frac{x-\\mu}{\\sigma}\\vert \\leq \\tau \\\\ \\frac{1}{\\sigma}\\phi(\\tau)\\frac{\\tau}{\\vert\\frac{x-\\mu}{\\sigma}\\vert}\\left(\\frac{\\log (\\tau)}{\\log(\\vert\\frac{x-\\mu}{\\sigma}\\vert)}\\right)^{\\lambda+1} & \\text{} \\vert\\frac{x-\\mu}{\\sigma}\\vert > \\tau \\end{cases} \\] \\(\\phi\\) denotes standard normal pdf. parameters \\((\\tau,\\lambda)\\) controlled user-specified hyperparameter \\(\\rho \\(2\\Phi(1)-1,1)\\) \\[ \\tau=\\Phi^{-1}((1+\\rho)/2),  \\ \\ \\ \\ \\lambda=2(1-\\rho)^{-1}\\phi(\\tau)\\tau\\log(\\tau) \\] robust likelihood can utilized setting robust = T calling thebayesynergy function. user-specified parameter \\(\\rho\\) can set rho argument, default set \\(0.9\\). kernel, recommend utilising Matérn kernel Penalized Complexity (PC) prior kernel hyperparameters. PC prior Matern covariance described Fuglstad et al. (2018), strongly encourages small deviations null model, .e. high probability interaction term zero. PC prior kernel hyperparameters \\((\\sigma_f^2,\\ell)\\) (2-dimensional case) takes form \\[ \\pi(\\sigma_f^2,\\ell)=\\tilde{\\lambda}_1\\tilde{\\lambda}_2\\ell^{-2}\\sigma_f^{-1}\\exp\\left(-\\tilde{\\lambda}_1\\ell^{-1}-\\tilde{\\lambda}_2\\sigma_f\\right), \\] \\((\\tilde{\\lambda}_1,\\tilde{\\lambda}_2)\\) set reflect prior beliefs \\(P(\\ell < \\ell_0)=\\alpha_1\\) \\(P(\\sigma_f^2 > \\sigma^2_{f0})=\\alpha_2\\) \\[ \\tilde{\\lambda}_1=-\\log(-\\alpha_1)\\ell \\ \\ \\ \\ \\tilde{\\lambda}_2=-\\frac{\\log(\\alpha_2)}{\\sigma_{f0}^2}, \\] \\((\\ell_0,\\alpha_1,\\sigma_{f0}^2,\\alpha_2)\\) hyperparameters set user. PC prior can enabled setting pcprior = T calling bayesynergy function, hyperparameters specified argument pcprior_hypers. default, recommend \\((\\ell_0,\\alpha_1,\\sigma_{f0}^2,\\alpha_2)=(1,0.1,1,0.2)\\).","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/articles/Advanced_topics.html","id":"including-controls","dir":"Articles","previous_headings":"","what":"Including controls","title":"Advanced topics","text":"positive negative controls essentially control signal--noise ratio cell viability assays. user access , can included model help calibrate posterior distribution – particularly case zero replicates. Let \\(\\xi^-_k\\) \\(\\xi^+_l\\) denote negative positive controls \\(k=1,\\ldots,n_-\\) \\(l=1,\\ldots,n_+\\). measurements raw readings plate used calculate cell viability. additional well, treated drug concentration \\(\\mathbf{x}_i\\), denote raw output \\(\\xi_i\\), calculate cell viability well formula: \\[ y_i = \\frac{\\xi_i-\\tilde{\\xi^+}}{\\tilde{\\xi^-}-\\tilde{\\xi^+}}, \\] \\(\\tilde{\\xi^-}\\) \\(\\tilde{\\xi^+}\\) denotes measure centrality positive negative controls, typically mean median. controls can passed function converted % viability. variances normalized controls, \\(\\lambda\\) can set indicated . negative controls can added directly algorithm. Negative controls represents unhindered cell growth, can thought samples dose-response function \\(f(\\mathbf{x})\\) concentration \\(\\mathbf{x}=(0,0)\\). can added directly \\(\\texttt{bayesynergy}\\) function way regular observations.","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/articles/Advanced_topics.html","id":"synergy-classification","dir":"Articles","previous_headings":"","what":"Synergy classification","title":"Advanced topics","text":"Frequently, interest classify experiment synergistic antagonistic. Usually, done thresholding synergy measure certain level, declaring e.g. everything 10 synergistic, everything -10 antagonistic, anything additive (interaction). problem completely ignores underlying measurement error, consequence thresholding procedure can lead misclassification. Large synergistic effects might classified synergistic, reality effect discerned background noise. manner, genuine synergistic effects small, example dose-ranges bit , also misclassified. incorporating uncertainty classification can done principled manner. Bayesian inference, can compute know model evidence. , given probabilistic model \\(\\mathcal{M}\\), data think generated , \\(\\mathcal{D}\\), evidence defined probability model given data, \\(P(\\mathcal{M} \\vert \\mathcal{D})\\). can use quantity compare different models, particular comparing two distinct models can define Bayes Factor, \\(\\text{BF}_{10}\\): \\[ \\text{BF}_{10}=\\frac{P(\\mathcal{D}\\vert\\mathcal{M}_1)}{P(\\mathcal{D}\\vert\\mathcal{M}_0)} = \\frac{P(\\mathcal{M}_1 \\vert \\mathcal{D})}{P(\\mathcal{M}_0 \\vert \\mathcal{D})}\\frac{P(\\mathcal{M}_1)}{P(\\mathcal{M}_0)}, \\] \\(P(\\mathcal{M}_1)\\) \\(P(\\mathcal{M}_0)\\) denotes prior model probabilities. defining \\[ \\mathcal{M}_0: f(\\mathbf{x}) = p_0(\\mathbf{x}) \\\\ \\mathcal{M}_1: f(\\mathbf{x}) = p_0(\\mathbf{x}) + \\Delta(\\mathbf{x}), \\] computing \\(\\text{BF}_{10}\\), Bayes factor gives information whether interaction surface needs included model. high value indicates \\(\\mathcal{M}_1\\) preferred \\(\\mathcal{M}_0\\), thus likely interaction experiment. One still needs make cutoff, less arbitrary connecting directly uncertainty model, model evidence. thresholding can done according e.g. table Kass Raftery (1995): Bayes factor gives information whether interaction present. Depending classification task, one still needs decide effect synergistic antagonistic. one e.g. use integral interaction surface, \\(\\text{VUS}(\\Delta)\\), negative experiment coded synergistic, positive coded antagonistic. calculation Bayes factor implemented directly bayesynergy function, can calculated simply adding bayes_factor = T call. Model evidence Bayes factor computed via bridgesampling package (Gronau, Singmann, Wagenmakers (2020)).","code":""},{"path":[]},{"path":"https://ocbe-uio.github.io/bayesynergy/articles/Example_screen.html","id":"melanoma-cell-line-example","dir":"Articles","previous_headings":"","what":"Melanoma cell line example","title":"Example: Multiple experiments","text":"Included package result synergyscreen run 583 drug combinations -375 human melanoma cell line ONeil et al. (2016). synergyscreen object list two entries, dataframe parameter estimates experiment, list entitled failed – containing experiments either failed completely process, unsatisfactory fit. see dataset two experiments failed process, initial run synergyscreen. ’s multitude reasons experiment might fail process, input error, initialization problems problems parallel processing. entries failed lists, containing necessary information process bayesynergy function can rerun experiments failed process, simply passing returned synergyscreen object back function. Note turn default options saving fit plotting everything, set method = \"vb\" indicating use variational inference fit model.","code":"library(bayesynergy) data(\"ONeil_A375\") length(ONeil_A375$failed) ## [1] 2 failed_experiment = ONeil_A375$failed[[1]] names(failed_experiment) ## [1] \"y\"             \"x\"             \"drug_names\"    \"experiment_ID\" head(cbind(failed_experiment$y,failed_experiment$x)) ##      viability L778123 MK-4827 ## [1,]     0.759   0.325   0.223 ## [2,]     0.755   0.325   0.775 ## [3,]     0.548   0.325   2.750 ## [4,]     0.307   0.325  10.000 ## [5,]     0.787   0.800   0.223 ## [6,]     0.820   0.800   0.775 fit_screen = synergyscreen(ONeil_A375, save_raw = F, save_plots = F, parallel = F,                             bayesynergy_params = list(method = \"vb\")) ## Chain 1: ------------------------------------------------------------ ## Chain 1: EXPERIMENTAL ALGORITHM: ## Chain 1:   This procedure has not been thoroughly tested and may be unstable ## Chain 1:   or buggy. The interface is subject to change. ## Chain 1: ------------------------------------------------------------ ## Chain 1:  ## Chain 1:  ## Chain 1:  ## Chain 1: Gradient evaluation took 0.000402 seconds ## Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 4.02 seconds. ## Chain 1: Adjust your expectations accordingly! ## Chain 1:  ## Chain 1:  ## Chain 1: Begin eta adaptation. ## Chain 1: Iteration:   1 / 250 [  0%]  (Adaptation) ## Chain 1: Iteration:  50 / 250 [ 20%]  (Adaptation) ## Chain 1: Iteration: 100 / 250 [ 40%]  (Adaptation) ## Chain 1: Iteration: 150 / 250 [ 60%]  (Adaptation) ## Chain 1: Iteration: 200 / 250 [ 80%]  (Adaptation) ## Chain 1: Iteration: 250 / 250 [100%]  (Adaptation) ## Chain 1: ------------------------------------------------------------ ## Chain 1: EXPERIMENTAL ALGORITHM: ## Chain 1:   This procedure has not been thoroughly tested and may be unstable ## Chain 1:   or buggy. The interface is subject to change. ## Chain 1: ------------------------------------------------------------ ## Chain 1:  ## Chain 1:  ## Chain 1:  ## Chain 1: Gradient evaluation took 0.000306 seconds ## Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 3.06 seconds. ## Chain 1: Adjust your expectations accordingly! ## Chain 1:  ## Chain 1:  ## Chain 1: Begin eta adaptation. ## Chain 1: Iteration:   1 / 250 [  0%]  (Adaptation) ## Chain 1: Iteration:  50 / 250 [ 20%]  (Adaptation) ## Chain 1: Iteration: 100 / 250 [ 40%]  (Adaptation) ## Chain 1: Iteration: 150 / 250 [ 60%]  (Adaptation) ## Chain 1: Iteration: 200 / 250 [ 80%]  (Adaptation) ## Chain 1: Iteration: 250 / 250 [100%]  (Adaptation) ## Chain 1: ------------------------------------------------------------ ## Chain 1: EXPERIMENTAL ALGORITHM: ## Chain 1:   This procedure has not been thoroughly tested and may be unstable ## Chain 1:   or buggy. The interface is subject to change. ## Chain 1: ------------------------------------------------------------ ## Chain 1:  ## Chain 1:  ## Chain 1:  ## Chain 1: Gradient evaluation took 0.000265 seconds ## Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 2.65 seconds. ## Chain 1: Adjust your expectations accordingly! ## Chain 1:  ## Chain 1:  ## Chain 1: Begin eta adaptation. ## Chain 1: Iteration:   1 / 250 [  0%]  (Adaptation) ## Chain 1: Iteration:  50 / 250 [ 20%]  (Adaptation) ## Chain 1: Iteration: 100 / 250 [ 40%]  (Adaptation) ## Chain 1: Iteration: 150 / 250 [ 60%]  (Adaptation) ## Chain 1: Iteration: 200 / 250 [ 80%]  (Adaptation) ## Chain 1: Iteration: 250 / 250 [100%]  (Adaptation) ## Chain 1: Success! Found best value [eta = 0.1]. ## Chain 1:  ## Chain 1: Begin stochastic gradient ascent. ## Chain 1:   iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  ## Chain 1:    100        -4860.788             1.000            1.000 ## Chain 1:    200       -10126.267             0.760            1.000 ## Chain 1:    300        -5561.405             0.780            0.821 ## Chain 1:    400        -5530.223             0.587            0.821 ## Chain 1:    500        -4317.703             0.525            0.520 ## Chain 1:    600        -7811.948             0.512            0.520 ## Chain 1:    700        -4960.627             0.521            0.520 ## Chain 1:    800        -4268.776             0.476            0.520 ## Chain 1:    900        -4957.297             0.439            0.447 ## Chain 1:   1000        -3895.517             0.422            0.447 ## Chain 1:   1100        -3266.061             0.342            0.281 ## Chain 1:   1200        -2129.613             0.343            0.281 ## Chain 1:   1300        -2725.341             0.283            0.273 ## Chain 1:   1400        -1851.887             0.329            0.281 ## Chain 1:   1500        -2584.757             0.330            0.284 ## Chain 1:   1600        -2055.410             0.311            0.273 ## Chain 1:   1700        -2347.692             0.266            0.258 ## Chain 1:   1800        -2168.106             0.258            0.258 ## Chain 1:   1900        -1911.069             0.257            0.258 ## Chain 1:   2000        -1876.216             0.232            0.219 ## Chain 1:   2100        -1597.373             0.230            0.219 ## Chain 1:   2200        -2008.067             0.197            0.205 ## Chain 1:   2300        -1361.956             0.223            0.205 ## Chain 1:   2400        -1502.685             0.185            0.175 ## Chain 1:   2500        -1292.627             0.173            0.163 ## Chain 1:   2600        -2192.369             0.188            0.163 ## Chain 1:   2700        -1110.858             0.273            0.175 ## Chain 1:   2800        -1500.580             0.291            0.205 ## Chain 1:   2900        -1066.382             0.318            0.260 ## Chain 1:   3000        -1151.814             0.323            0.260 ## Chain 1:   3100        -1195.934             0.310            0.260 ## Chain 1:   3200        -1049.637             0.303            0.260 ## Chain 1:   3300        -1004.046             0.260            0.163 ## Chain 1:   3400        -1514.632             0.285            0.260 ## Chain 1:   3500         -892.361             0.338            0.337 ## Chain 1:   3600        -1069.318             0.314            0.260 ## Chain 1:   3700         -799.804             0.250            0.260 ## Chain 1:   3800         -968.228             0.241            0.174 ## Chain 1:   3900        -1135.559             0.215            0.165 ## Chain 1:   4000         -959.012             0.226            0.174 ## Chain 1:   4100         -829.659             0.238            0.174 ## Chain 1:   4200         -750.800             0.235            0.174 ## Chain 1:   4300         -832.245             0.240            0.174 ## Chain 1:   4400         -868.118             0.211            0.165 ## Chain 1:   4500         -681.331             0.168            0.165 ## Chain 1:   4600         -654.109             0.156            0.156 ## Chain 1:   4700         -593.368             0.132            0.147 ## Chain 1:   4800         -708.854             0.131            0.147 ## Chain 1:   4900         -657.695             0.124            0.105 ## Chain 1:   5000         -590.246             0.117            0.105 ## Chain 1:   5100         -604.318             0.104            0.102 ## Chain 1:   5200         -665.249             0.103            0.098 ## Chain 1:   5300         -745.381             0.104            0.102 ## Chain 1:   5400         -543.667             0.137            0.108 ## Chain 1:   5500         -590.189             0.117            0.102 ## Chain 1:   5600         -605.695             0.116            0.102 ## Chain 1:   5700         -507.219             0.125            0.108 ## Chain 1:   5800         -612.470             0.126            0.108 ## Chain 1:   5900         -557.804             0.128            0.108 ## Chain 1:   6000         -553.142             0.117            0.098 ## Chain 1:   6100         -681.902             0.134            0.108 ## Chain 1:   6200         -573.949             0.143            0.172 ## Chain 1:   6300         -540.277             0.139            0.172 ## Chain 1:   6400         -443.817             0.123            0.172 ## Chain 1:   6500         -578.591             0.139            0.188 ## Chain 1:   6600         -413.764             0.176            0.189 ## Chain 1:   6700         -431.288             0.161            0.188 ## Chain 1:   6800         -494.692             0.156            0.188 ## Chain 1:   6900         -463.815             0.153            0.188 ## Chain 1:   7000         -432.226             0.160            0.188 ## Chain 1:   7100         -398.188             0.149            0.128 ## Chain 1:   7200         -440.302             0.140            0.096 ## Chain 1:   7300         -421.724             0.138            0.096 ## Chain 1:   7400         -447.638             0.122            0.085 ## Chain 1:   7500         -400.582             0.111            0.085 ## Chain 1:   7600         -415.116             0.074            0.073 ## Chain 1:   7700         -431.546             0.074            0.073 ## Chain 1:   7800         -440.883             0.063            0.067 ## Chain 1:   7900         -437.082             0.058            0.058 ## Chain 1:   8000         -427.175             0.053            0.044 ## Chain 1:   8100         -451.642             0.050            0.044 ## Chain 1:   8200         -344.162             0.071            0.044 ## Chain 1:   8300         -336.808             0.069            0.038 ## Chain 1:   8400         -338.868             0.064            0.035 ## Chain 1:   8500         -360.947             0.058            0.035 ## Chain 1:   8600         -378.831             0.059            0.038 ## Chain 1:   8700         -302.918             0.081            0.047 ## Chain 1:   8800         -349.337             0.092            0.054 ## Chain 1:   8900         -348.412             0.091            0.054 ## Chain 1:   9000         -293.931             0.107            0.061 ## Chain 1:   9100         -344.485             0.117            0.133 ## Chain 1:   9200         -308.051             0.097            0.118 ## Chain 1:   9300         -320.628             0.099            0.118 ## Chain 1:   9400         -303.323             0.104            0.118 ## Chain 1:   9500         -334.784             0.107            0.118 ## Chain 1:   9600         -293.070             0.117            0.133 ## Chain 1:   9700         -311.054             0.098            0.118 ## Chain 1:   9800         -280.948             0.095            0.107 ## Chain 1:   9900         -280.061             0.095            0.107 ## Chain 1:   10000         -288.767             0.080            0.094 ## Chain 1: Informational Message: The maximum number of iterations is reached! The algorithm may not have converged. ## Chain 1: This variational approximation is not guaranteed to be meaningful. ## Chain 1:  ## Chain 1: Drawing a sample of size 1000 from the approximate posterior...  ## Chain 1: COMPLETED. ## Chain 1: ------------------------------------------------------------ ## Chain 1: EXPERIMENTAL ALGORITHM: ## Chain 1:   This procedure has not been thoroughly tested and may be unstable ## Chain 1:   or buggy. The interface is subject to change. ## Chain 1: ------------------------------------------------------------ ## Chain 1:  ## Chain 1:  ## Chain 1:  ## Chain 1: Gradient evaluation took 0.000316 seconds ## Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 3.16 seconds. ## Chain 1: Adjust your expectations accordingly! ## Chain 1:  ## Chain 1:  ## Chain 1: Begin eta adaptation. ## Chain 1: Iteration:   1 / 250 [  0%]  (Adaptation) ## Chain 1: Iteration:  50 / 250 [ 20%]  (Adaptation) ## Chain 1: Iteration: 100 / 250 [ 40%]  (Adaptation) ## Chain 1: Iteration: 150 / 250 [ 60%]  (Adaptation) ## Chain 1: Iteration: 200 / 250 [ 80%]  (Adaptation) ## Chain 1: Iteration: 250 / 250 [100%]  (Adaptation) ## Chain 1: ------------------------------------------------------------ ## Chain 1: EXPERIMENTAL ALGORITHM: ## Chain 1:   This procedure has not been thoroughly tested and may be unstable ## Chain 1:   or buggy. The interface is subject to change. ## Chain 1: ------------------------------------------------------------ ## Chain 1:  ## Chain 1:  ## Chain 1:  ## Chain 1: Gradient evaluation took 0.000259 seconds ## Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 2.59 seconds. ## Chain 1: Adjust your expectations accordingly! ## Chain 1:  ## Chain 1:  ## Chain 1: Begin eta adaptation. ## Chain 1: Iteration:   1 / 250 [  0%]  (Adaptation) ## Chain 1: Iteration:  50 / 250 [ 20%]  (Adaptation) ## Chain 1: Iteration: 100 / 250 [ 40%]  (Adaptation) ## Chain 1: Iteration: 150 / 250 [ 60%]  (Adaptation) ## Chain 1: Iteration: 200 / 250 [ 80%]  (Adaptation) ## Chain 1: Iteration: 250 / 250 [100%]  (Adaptation) ## Chain 1: Success! Found best value [eta = 0.1]. ## Chain 1:  ## Chain 1: Begin stochastic gradient ascent. ## Chain 1:   iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  ## Chain 1:    100        -1740.278             1.000            1.000 ## Chain 1:    200         -883.230             0.985            1.000 ## Chain 1:    300        -1174.491             0.739            0.970 ## Chain 1:    400         -852.065             0.649            0.970 ## Chain 1:    500         -959.049             0.542            0.378 ## Chain 1:    600         -821.924             0.479            0.378 ## Chain 1:    700        -1108.896             0.448            0.259 ## Chain 1:    800         -788.226             0.443            0.378 ## Chain 1:    900         -752.925             0.399            0.259 ## Chain 1:   1000         -760.918             0.360            0.259 ## Chain 1:   1100         -736.928             0.263            0.248 ## Chain 1:   1200         -673.625             0.175            0.167 ## Chain 1:   1300         -669.215             0.151            0.112 ## Chain 1:   1400         -794.585             0.129            0.112 ## Chain 1:   1500         -624.534             0.145            0.158 ## Chain 1:   1600         -598.237             0.133            0.094 ## Chain 1:   1700         -679.851             0.119            0.094 ## Chain 1:   1800         -575.220             0.097            0.094 ## Chain 1:   1900         -613.729             0.098            0.094 ## Chain 1:   2000         -616.162             0.098            0.094 ## Chain 1:   2100         -651.031             0.100            0.094 ## Chain 1:   2200         -567.211             0.105            0.120 ## Chain 1:   2300         -744.950             0.128            0.148 ## Chain 1:   2400         -560.266             0.145            0.148 ## Chain 1:   2500         -606.584             0.126            0.120 ## Chain 1:   2600         -563.640             0.129            0.120 ## Chain 1:   2700         -532.267             0.123            0.076 ## Chain 1:   2800         -627.207             0.120            0.076 ## Chain 1:   2900         -477.556             0.145            0.148 ## Chain 1:   3000         -536.006             0.155            0.148 ## Chain 1:   3100         -542.696             0.151            0.148 ## Chain 1:   3200         -527.549             0.139            0.109 ## Chain 1:   3300         -507.293             0.120            0.076 ## Chain 1:   3400         -502.618             0.088            0.076 ## Chain 1:   3500         -495.865             0.081            0.059 ## Chain 1:   3600         -505.255             0.076            0.040 ## Chain 1:   3700         -515.305             0.072            0.029 ## Chain 1:   3800         -492.210             0.061            0.029 ## Chain 1:   3900         -508.379             0.033            0.029 ## Chain 1:   4000         -494.316             0.025            0.028 ## Chain 1:   4100         -464.703             0.030            0.029 ## Chain 1:   4200         -481.386             0.031            0.032 ## Chain 1:   4300         -573.361             0.043            0.032 ## Chain 1:   4400         -487.944             0.059            0.035 ## Chain 1:   4500         -453.269             0.066            0.047 ## Chain 1:   4600         -455.245             0.064            0.047 ## Chain 1:   4700         -450.021             0.063            0.047 ## Chain 1:   4800         -434.506             0.062            0.036 ## Chain 1:   4900         -461.114             0.065            0.058 ## Chain 1:   5000         -460.708             0.062            0.058 ## Chain 1:   5100         -436.157             0.061            0.056 ## Chain 1:   5200         -400.749             0.067            0.058 ## Chain 1:   5300         -481.626             0.067            0.058 ## Chain 1:   5400         -439.459             0.060            0.058 ## Chain 1:   5500         -458.603             0.056            0.056 ## Chain 1:   5600         -435.841             0.061            0.056 ## Chain 1:   5700         -426.247             0.062            0.056 ## Chain 1:   5800         -442.995             0.062            0.056 ## Chain 1:   5900         -405.141             0.066            0.056 ## Chain 1:   6000         -425.115             0.070            0.056 ## Chain 1:   6100         -473.757             0.075            0.088 ## Chain 1:   6200         -395.644             0.086            0.093 ## Chain 1:   6300         -409.774             0.073            0.052 ## Chain 1:   6400         -402.019             0.065            0.047 ## Chain 1:   6500         -385.313             0.065            0.047 ## Chain 1:   6600         -418.965             0.068            0.047 ## Chain 1:   6700         -394.287             0.072            0.063 ## Chain 1:   6800         -385.328             0.070            0.063 ## Chain 1:   6900         -418.699             0.069            0.063 ## Chain 1:   7000         -361.886             0.080            0.080 ## Chain 1:   7100         -358.030             0.071            0.063 ## Chain 1:   7200         -368.963             0.054            0.043 ## Chain 1:   7300         -354.685             0.055            0.043 ## Chain 1:   7400         -394.876             0.063            0.063 ## Chain 1:   7500         -405.902             0.061            0.063 ## Chain 1:   7600         -370.953             0.063            0.063 ## Chain 1:   7700         -392.190             0.062            0.054 ## Chain 1:   7800         -423.907             0.067            0.075 ## Chain 1:   7900         -348.140             0.081            0.075 ## Chain 1:   8000         -351.915             0.066            0.054 ## Chain 1:   8100         -410.714             0.079            0.075 ## Chain 1:   8200         -372.081             0.087            0.094 ## Chain 1:   8300         -391.642             0.088            0.094 ## Chain 1:   8400         -345.930             0.091            0.094 ## Chain 1:   8500         -373.147             0.095            0.094 ## Chain 1:   8600         -371.905             0.086            0.075 ## Chain 1:   8700         -341.658             0.090            0.089 ## Chain 1:   8800         -381.708             0.093            0.104 ## Chain 1:   8900         -347.128             0.081            0.100 ## Chain 1:   9000         -364.200             0.085            0.100 ## Chain 1:   9100         -328.459             0.081            0.100 ## Chain 1:   9200         -318.881             0.074            0.089 ## Chain 1:   9300         -351.735             0.078            0.093 ## Chain 1:   9400         -328.591             0.072            0.089 ## Chain 1:   9500         -352.075             0.071            0.089 ## Chain 1:   9600         -362.543             0.074            0.089 ## Chain 1:   9700         -335.201             0.073            0.082 ## Chain 1:   9800         -331.359             0.064            0.070 ## Chain 1:   9900         -345.581             0.058            0.067 ## Chain 1:   10000         -355.387             0.056            0.067 ## Chain 1: Informational Message: The maximum number of iterations is reached! The algorithm may not have converged. ## Chain 1: This variational approximation is not guaranteed to be meaningful. ## Chain 1:  ## Chain 1: Drawing a sample of size 1000 from the approximate posterior...  ## Chain 1: COMPLETED. ## Chain 1: ------------------------------------------------------------ ## Chain 1: EXPERIMENTAL ALGORITHM: ## Chain 1:   This procedure has not been thoroughly tested and may be unstable ## Chain 1:   or buggy. The interface is subject to change. ## Chain 1: ------------------------------------------------------------ ## Chain 1:  ## Chain 1:  ## Chain 1:  ## Chain 1: Gradient evaluation took 0.000321 seconds ## Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 3.21 seconds. ## Chain 1: Adjust your expectations accordingly! ## Chain 1:  ## Chain 1:  ## Chain 1: Begin eta adaptation. ## Chain 1: Iteration:   1 / 250 [  0%]  (Adaptation) ## Chain 1: Iteration:  50 / 250 [ 20%]  (Adaptation) ## Chain 1: Iteration: 100 / 250 [ 40%]  (Adaptation) ## Chain 1: Iteration: 150 / 250 [ 60%]  (Adaptation) ## Chain 1: Iteration: 200 / 250 [ 80%]  (Adaptation) ## Chain 1: Iteration: 250 / 250 [100%]  (Adaptation) ## Chain 1: Success! Found best value [eta = 0.1]. ## Chain 1:  ## Chain 1: Begin stochastic gradient ascent. ## Chain 1:   iter             ELBO   delta_ELBO_mean   delta_ELBO_med   notes  ## Chain 1:    100         -840.096             1.000            1.000 ## Chain 1:    200         -480.433             0.874            1.000 ## Chain 1:    300         -639.272             0.666            0.749 ## Chain 1:    400         -821.495             0.555            0.749 ## Chain 1:    500         -578.721             0.528            0.420 ## Chain 1:    600         -895.460             0.499            0.420 ## Chain 1:    700        -1271.501             0.470            0.354 ## Chain 1:    800         -445.018             0.643            0.420 ## Chain 1:    900         -517.479             0.587            0.354 ## Chain 1:   1000         -410.798             0.554            0.354 ## Chain 1:   1100         -557.552             0.481            0.296 ## Chain 1:   1200         -477.736             0.423            0.263 ## Chain 1:   1300         -430.359             0.409            0.263 ## Chain 1:   1400         -405.340             0.393            0.263 ## Chain 1:   1500         -605.161             0.384            0.263 ## Chain 1:   1600         -323.551             0.436            0.263 ## Chain 1:   1700         -421.450             0.429            0.260 ## Chain 1:   1800         -382.934             0.254            0.232 ## Chain 1:   1900         -398.451             0.243            0.232 ## Chain 1:   2000         -353.770             0.230            0.167 ## Chain 1:   2100         -391.602             0.213            0.126 ## Chain 1:   2200         -370.174             0.202            0.110 ## Chain 1:   2300         -423.666             0.204            0.126 ## Chain 1:   2400         -413.249             0.200            0.126 ## Chain 1:   2500         -347.253             0.186            0.126 ## Chain 1:   2600         -361.776             0.103            0.101 ## Chain 1:   2700         -354.107             0.082            0.097 ## Chain 1:   2800         -322.251             0.082            0.097 ## Chain 1:   2900         -339.203             0.083            0.097 ## Chain 1:   3000         -373.944             0.080            0.093 ## Chain 1:   3100         -256.972             0.116            0.093 ## Chain 1:   3200         -273.861             0.116            0.093 ## Chain 1:   3300         -356.905             0.127            0.093 ## Chain 1:   3400         -289.865             0.147            0.099 ## Chain 1:   3500         -282.025             0.131            0.093 ## Chain 1:   3600         -274.295             0.130            0.093 ## Chain 1:   3700         -312.355             0.140            0.099 ## Chain 1:   3800         -304.688             0.133            0.093 ## Chain 1:   3900         -282.474             0.136            0.093 ## Chain 1:   4000         -326.621             0.140            0.122 ## Chain 1:   4100         -227.638             0.138            0.122 ## Chain 1:   4200         -293.713             0.154            0.135 ## Chain 1:   4300         -238.639             0.154            0.135 ## Chain 1:   4400         -261.939             0.140            0.122 ## Chain 1:   4500         -282.993             0.144            0.122 ## Chain 1:   4600         -215.268             0.173            0.135 ## Chain 1:   4700         -182.044             0.179            0.183 ## Chain 1:   4800         -225.611             0.196            0.193 ## Chain 1:   4900         -216.872             0.192            0.193 ## Chain 1:   5000         -230.731             0.184            0.193 ## Chain 1:   5100         -205.898             0.153            0.183 ## Chain 1:   5200         -266.060             0.153            0.183 ## Chain 1:   5300         -241.290             0.140            0.121 ## Chain 1:   5400         -198.088             0.153            0.183 ## Chain 1:   5500         -211.846             0.152            0.183 ## Chain 1:   5600         -198.791             0.127            0.121 ## Chain 1:   5700         -192.726             0.112            0.103 ## Chain 1:   5800         -205.411             0.099            0.066 ## Chain 1:   5900         -201.744             0.097            0.066 ## Chain 1:   6000         -200.403             0.092            0.066 ## Chain 1:   6100         -199.061             0.080            0.065 ## Chain 1:   6200         -191.360             0.062            0.062 ## Chain 1:   6300         -181.480             0.057            0.054 ## Chain 1:   6400         -169.791             0.042            0.054 ## Chain 1:   6500         -196.522             0.049            0.054 ## Chain 1:   6600         -172.586             0.056            0.054 ## Chain 1:   6700         -182.417             0.059            0.054 ## Chain 1:   6800         -208.015             0.065            0.054 ## Chain 1:   6900         -152.542             0.099            0.069 ## Chain 1:   7000         -196.517             0.121            0.123 ## Chain 1:   7100         -146.268             0.155            0.136 ## Chain 1:   7200         -193.864             0.175            0.139 ## Chain 1:   7300         -185.046             0.174            0.139 ## Chain 1:   7400         -147.455             0.193            0.224 ## Chain 1:   7500         -140.992             0.184            0.224 ## Chain 1:   7600         -167.028             0.186            0.224 ## Chain 1:   7700         -152.199             0.190            0.224 ## Chain 1:   7800         -127.861             0.197            0.224 ## Chain 1:   7900         -127.626             0.161            0.190 ## Chain 1:   8000         -151.039             0.154            0.156 ## Chain 1:   8100         -167.047             0.129            0.155 ## Chain 1:   8200         -103.028             0.167            0.155 ## Chain 1:   8300         -162.585             0.198            0.156 ## Chain 1:   8400         -143.814             0.186            0.155 ## Chain 1:   8500         -114.402             0.207            0.156 ## Chain 1:   8600         -148.756             0.215            0.190 ## Chain 1:   8700         -122.816             0.226            0.211 ## Chain 1:   8800         -149.826             0.225            0.211 ## Chain 1:   8900         -145.014             0.228            0.211 ## Chain 1:   9000         -135.265             0.220            0.211 ## Chain 1:   9100         -131.859             0.213            0.211 ## Chain 1:   9200         -104.993             0.176            0.211 ## Chain 1:   9300         -158.963             0.174            0.211 ## Chain 1:   9400         -105.710             0.211            0.231 ## Chain 1:   9500         -108.546             0.188            0.211 ## Chain 1:   9600         -121.626             0.176            0.180 ## Chain 1:   9700         -101.924             0.174            0.180 ## Chain 1:   9800          -82.120             0.180            0.193 ## Chain 1:   9900          -95.033             0.190            0.193 ## Chain 1:   10000          -99.660             0.188            0.193 ## Chain 1: Informational Message: The maximum number of iterations is reached! The algorithm may not have converged. ## Chain 1: This variational approximation is not guaranteed to be meaningful. ## Chain 1:  ## Chain 1: Drawing a sample of size 1000 from the approximate posterior...  ## Chain 1: COMPLETED."},{"path":"https://ocbe-uio.github.io/bayesynergy/articles/Example_screen.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"Example: Multiple experiments","text":"can also plot result screen:","code":"plot(fit_screen)"},{"path":[]},{"path":[]},{"path":"https://ocbe-uio.github.io/bayesynergy/articles/Example_single.html","id":"monotherapy-curves-2d-contour-plots","dir":"Articles","previous_headings":"Visualization","what":"Monotherapy curves, 2D contour plots","title":"Example: Single experiment","text":"can also create plots simply running  produces monotherapy curves, monotherapy summary statistics, 2D contour plots dose-response function \\(f\\), non-interaction assumption \\(p_0\\) interaction \\(\\Delta\\). last plot displays \\(rVUS\\) scores discussed previously, corresponding uncertainty.","code":"plot(fit, plot3D = F)"},{"path":"https://ocbe-uio.github.io/bayesynergy/articles/Example_single.html","id":"d-interactive-plots","dir":"Articles","previous_headings":"Visualization","what":"3D interactive plots","title":"Example: Single experiment","text":"package can also generate 3D interactive plots setting plot3D = T. displayed following using plotly library (Plotly Technologies Inc. (2015)).","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://ocbe-uio.github.io/bayesynergy/articles/Model.html","id":"the-model","dir":"Articles","previous_headings":"","what":"The model","title":"Mathematical model","text":"dose-response function \\(f:\\boldsymbol{x} \\(0,1)\\), maps drug concentrations \\(\\boldsymbol{x}\\) measure cell viability – zero corresponding cells dead treatment, one corresponding cells still alive. drug-combination screens, common assume dose-response function can broken \\[ f(\\boldsymbol{x}) = p_0(\\boldsymbol{x})+\\Delta(\\boldsymbol{x}), \\] \\(p_0(\\boldsymbol{x})\\) encodes non-interaction assumption, \\(\\Delta(\\boldsymbol{x})\\) captures residual interaction effect.","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/articles/Model.html","id":"non-interaction","dir":"Articles","previous_headings":"The model","what":"Non-interaction","title":"Mathematical model","text":"non-interaction assumption, \\(p_0(\\boldsymbol{x})\\), captures can reasonably assumed joint drug effect, given estimates drugs’ individual effect. assume Bliss style independence assumption, first assume individual drugs’ dose-response function takes form log-logistic curve \\[ h_i(x_i|l,s,m) = l + \\frac{1-l}{1+10^{s(x_i-m)}}, \\] \\(l\\) lower-asymptote, \\(s\\) slope, \\(m\\) drugs ‘EC-50’ \\(\\log_{10}\\) scale. Bliss assumption amounts probabilistic independence assumption, \\[ p_0(\\boldsymbol{x}) = h_1(x_1|l_1,s_1,m_1) \\ h_2(x_2|l_2,s_2,m_2). \\] call probabilistic, can interpret individual dose-response curves, \\(h_i()\\) probability cell survival. Defining events \\[ \\begin{align} A_i & = \\text{cell survives drug concentration $x_{1i}$} \\\\ B_j & = \\text{cell survives drug B concentration $x_{2j}$} \\\\ C_{ij} & = \\text{cell survives drugs concentration $\\boldsymbol{x}=(x_{1i},x_{2j})$}, \\end{align} \\] corresponding probabilities become \\[ p_0(\\boldsymbol{x}) = P(C_{ij}) = P(A_i)P(B_i) = h_1(x_1|l_1,s_1,m_1) \\ h_2(x_2|l_2,s_2,m_2). \\]","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/articles/Model.html","id":"interaction","dir":"Articles","previous_headings":"The model","what":"Interaction","title":"Mathematical model","text":"interaction component, \\(\\Delta(\\boldsymbol{x})\\), captures joint effect drugs captured non-interaction assumption. two drugs effective together expected \\(p_0\\), call synergy, corresponds \\(\\Delta <0\\). opposite effect deemed antagonism. interaction landscape can complex, multiple local peaks valleys, model term non-parametrically using Gaussian Process prior (GP). ensure resulting dose-response function takes values interval \\((0,1)\\), push GP transformation function \\(g()\\). \\[ z(\\boldsymbol{x}) \\sim \\mathcal{GP}(0,\\kappa(\\boldsymbol{x},\\boldsymbol{x}')) \\\\ \\Delta(\\boldsymbol{x}) = g(z(\\boldsymbol{x})), \\] transformation function looks like \\[ g(z(\\boldsymbol{x})) = \\frac{-p_0(\\boldsymbol{x})}{1+\\exp\\left\\{b_1z(\\boldsymbol{x})+\\log\\left[\\frac{p_0(\\boldsymbol{x})}{1-p_0(\\boldsymbol{x})}\\right]\\right\\}} + \\frac{1-p_0(\\boldsymbol{x})}{1+\\exp\\left\\{-b_2z(\\boldsymbol{x})-\\log\\left[\\frac{p_0(\\boldsymbol{x})}{1-p_0(\\boldsymbol{x})}\\right]\\right\\}}. \\] addition ensuring proper bounds dose-response function, transformation feature \\(g(0)=0\\), corresponds priori assumption \\[ \\mathbb{E}\\left[f(\\boldsymbol{x}) | p_0(\\boldsymbol{x})\\right] \\approx p_0(\\boldsymbol{x}). \\] , make non-interaction assumption formal prior expectation dose-response function. achieves two things, (1) slightly conservative model needs convinced interaction effects present, (2) built-bias interaction prior structure. covariance function \\(\\kappa(\\boldsymbol{x},\\boldsymbol{x}')\\) can given multiple specifications, including squared exponential, Matérn, Rational Quadratic covariance functions. default, use Matérn covariance \\(\\nu\\) parameter set 3/2 yielding \\[ \\kappa(\\boldsymbol{x},\\boldsymbol{x}') = \\sigma_f^2\\left(1+\\frac{\\sqrt{3}\\Vert\\boldsymbol{x}-\\boldsymbol{x}'\\Vert}{\\ell}\\right)\\exp\\left\\{-\\frac{\\sqrt{3}\\Vert\\boldsymbol{x}-\\boldsymbol{x}'\\Vert}{\\ell}\\right\\}. \\] Finally, utilizing natural grid structure drug concentrations, can write kernel function \\[ \\kappa(\\boldsymbol{x},\\boldsymbol{x}') = \\sigma_f^2 \\kappa(x_1,x_1')\\kappa(x_2,x_2'), \\] induces Kronecker product structure final covariance matrix. Following implementation detailed Flaxman et al. (2015), greatly improves computational efficiency model.","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/articles/Model.html","id":"the-observation-model","dir":"Articles","previous_headings":"The model","what":"The observation model","title":"Mathematical model","text":"Given formulation dose-response function \\(f\\), assume access noisy observations . observations typically generated various cellular assays, e.g. viability assays. particular assume given concentration points \\(\\boldsymbol{x}_1,\\ldots,\\boldsymbol{x}_n\\) observations \\(y_1,\\ldots,y_n\\) \\[ y_i = f(\\boldsymbol{x}_i) + \\epsilon_i, \\] assume errors \\(\\epsilon_i\\) normally distributed mean zero. variance observational errors, default model heteroscedastic fashion \\[ \\text{Var}\\left[\\epsilon_i\\right] = \\sigma^2(f(\\boldsymbol{x}_i)+\\lambda), \\] \\(\\lambda\\) set small value handle case \\(f = 0\\), still residual noise. typical setup cell viability calculated normalization positive negative controls, lambda can empirically set \\[ \\lambda = \\frac{\\sigma^2_{+}}{\\sigma^2_{-}}, \\] \\(\\sigma^2_{+}\\) \\(\\sigma^2_{-}\\) denotes variance positive negative controls, respectively. choose heteroscedastic model default, cell viability assays, observations normalized relation positive negative controls. positive controls typically much lower variance compared negative controls, translates viability measures closer zero precisely measured. also allow homoscedastic noise option.","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/articles/Model.html","id":"full-model-specification","dir":"Articles","previous_headings":"The model","what":"Full model specification","title":"Mathematical model","text":"full model specification, default prior distributions look like \\[ y_i \\sim \\mathcal{N}\\left(f(\\boldsymbol{x}_i),\\sigma^2(f(\\boldsymbol{x}_i)+\\lambda)\\right), \\ = 1,\\ldots, n \\\\ \\sigma \\sim \\text{Inv-Ga}\\left(5,1\\right), \\ \\lambda = 0.005. \\\\ f(\\boldsymbol{x}_i) = p_0(\\boldsymbol{x}_i)+\\Delta(\\boldsymbol{x}_i) \\mathbb{}(10^{\\boldsymbol{x}_i}>0) \\\\ p_0(\\boldsymbol{x}) = h_1(x_1|l_1,s_1,m_1) \\ h_2(x_2|l_2,s_2,m_2). \\\\ l_j = \\text{Beta}(1,1.25), \\ s_i \\sim \\text{Gamma}(1,1), \\\\ m_i \\sim \\mathcal{N}(\\theta_i,\\sigma_{m_i}^2), \\ j = 1,2 \\\\ \\theta_i \\sim \\mathcal{N}(0,1), \\ \\sigma_{m_i}^2 \\sim \\text{Inv-Ga}\\left(3,2\\right), \\ j = 1,2 \\\\ \\Delta(\\boldsymbol{x}) = g(z(\\boldsymbol{x})), \\ z(\\boldsymbol{x}) \\sim \\mathcal{GP}(0,\\kappa(\\boldsymbol{x},\\boldsymbol{x}')) \\\\ g(z(\\boldsymbol{x})) = \\frac{-p_0(\\boldsymbol{x})}{1+\\exp\\left\\{b_1z(\\boldsymbol{x})+\\log\\left[\\frac{p_0(\\boldsymbol{x})}{1-p_0(\\boldsymbol{x})}\\right]\\right\\}} + \\frac{1-p_0(\\boldsymbol{x})}{1+\\exp\\left\\{-b_2z(\\boldsymbol{x})-\\log\\left[\\frac{p_0(\\boldsymbol{x})}{1-p_0(\\boldsymbol{x})}\\right]\\right\\}} \\\\ \\kappa(\\boldsymbol{x},\\boldsymbol{x}') = \\sigma_f^2\\left(1+\\frac{\\sqrt{3}\\Vert\\boldsymbol{x}-\\boldsymbol{x}'\\Vert}{\\ell}\\right)\\exp\\left\\{-\\frac{\\sqrt{3}\\Vert\\boldsymbol{x}-\\boldsymbol{x}'\\Vert}{\\ell}\\right\\}, \\\\ \\sigma_f^2 \\sim \\text{log-}\\mathcal{N}(1,1), \\ \\ell \\sim \\text{Inv-Ga}(5,5) \\\\ b_j \\sim \\mathcal{N}(1,0.1^2), \\ j = 1,2. \\] Note specifications can altered. example, default estimate lower asymptotes, can also fixed equal zero. model specification , interaction term multiplied indicator function \\(\\mathbb{}(\\boldsymbol{x}>0)\\) taking value 1 elements \\(\\boldsymbol{x}\\) strictly larger zero. makes sure don’t allow interaction one drugs zero concentration.","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/articles/Model.html","id":"summary-measures","dir":"Articles","previous_headings":"The model","what":"Summary measures","title":"Mathematical model","text":"posterior dose-response function \\(f | \\mathbf{y}\\), derive number summary statistics concerning efficacy, synergy antagonism.","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/articles/Model.html","id":"monotherapy-summaries","dir":"Articles","previous_headings":"The model > Summary measures","what":"Monotherapy summaries","title":"Mathematical model","text":"monotherapy curves, produce estimates drug sensitivity score (DSS) drug integral \\[ DSS_0 = \\int_a^b 1-h_j(x) \\text{d}x, \\] \\(=\\min(x_{1j})\\) \\(b=\\max(x_{1j})\\). , integral taken measured dose range drug question. contrast regular DSS score calculated, integration starts mono-therapy crosses 90% viability threshold. done better separate true effects background noise, since handled sampling, don’t need . DSS value standardized total volume available drug efficacy, \\[ DSS = \\frac{DSS_0}{(b-)} \\] , values can standardized Yadav et al. (2014).","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/articles/Model.html","id":"combination-summaries","dir":"Articles","previous_headings":"The model > Summary measures","what":"Combination summaries","title":"Mathematical model","text":"summarise combined drug-response function, utilise measures developed Cremaschi et al. (2019). basic building block ‘volume surface’ VUS, general integral looks like \\[ VUS_0(f) = \\int_a^b \\int_c^d f(\\mathbf{x}) \\ \\text{d}\\mathbf{x}, \\] integrals taken observed drug range, .e. \\(= \\min (x_1)\\), \\(b = \\max (x_1)\\), \\(c = \\min (x_2)\\), \\(d = \\max (x_2)\\). standardised obtain value zero 100, \\[ VUS(f) = \\frac{VUS_0(f)}{(b-)(d-c)}. \\] Furthermore, make overall measure efficacy, define residual VUS (rVUS) \\[ rVUS(f) = 100 - VUS(f), \\] makes value comparable DSS values, higher number now indicates larger efficacy drug combination. model calculates \\(rVUS\\) dose-response function \\(f\\), giving measure combined efficacy. addition, calculate \\(rVUS(p_0)\\), non-interaction efficacy. makes possible separate much total efficacy can attributed non-interaction assumption. interaction term, simply compute VUS values e.g. \\(VUS(\\Delta)\\) interaction efficacy. interaction term \\(\\Delta\\), also compute \\(VUS(\\Delta^{-})\\) \\(VUS(\\Delta^{+})\\) synergy antagonism, \\(\\Delta^{+}\\) \\(\\Delta^{-}\\) denotes positive negative parts \\(\\Delta\\), respectively. , \\[ \\Delta^{+}(\\mathbf{x}) = \\max(0,\\Delta(\\mathbf{x})) \\\\ \\Delta^{-}(\\mathbf{x}) = \\min(0,\\Delta(\\mathbf{x})). \\] compute measures , frequently, interaction surface contains antagonistic synergistic regions. taking average across whole surface, antagonistic outlier might cancel otherwise strong synergistic effect.","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/articles/Model.html","id":"summarising-large-screens","dir":"Articles","previous_headings":"The model > Summary measures","what":"Summarising large screens","title":"Mathematical model","text":"running screens large amount drug combinations, helpful normalised measure comparing synergy across experiments. \\(rVUS\\) scores defined already standardized drug concentration range, compare across experiments, also standardize respect uncertainty model. , calculate synergy score normalizing \\(rVUS(\\Delta^{-})\\) respect standard deviation. \\[ \\text{Synergy score} = \\frac{\\text{mean}(VUS(\\Delta^{-}))}{\\text{sd}(VUS(\\Delta^{-}))}. \\]","code":""},{"path":[]},{"path":"https://ocbe-uio.github.io/bayesynergy/articles/bayesynergy.html","id":"basic-usage-example","dir":"Articles","previous_headings":"","what":"Basic usage example","title":"Introduction to bayesynergy","text":"get started, simply load package included example dataset large drug combination screening experiment diffuse large B-cell lymphoma. access , simply run y contains measured post-treatment viability, x corresponding drug concentrations two drugs. fit model, simply run wait sampling process complete. results can plotted inspect model fit e.g. monotherapies  similarly full dose-response surface interactive figure Quantitative measures drug response synergy, alongside summaries model parameters can extracted running detailed look functionality package, please see vignettes.","code":"library(bayesynergy) data(\"mathews_DLBCL\") y <- mathews_DLBCL[[1]][[1]] x <- mathews_DLBCL[[1]][[2]] head(cbind(y,x)) ##      Viability ibrutinib ispinesib ## [1,] 1.2295618    0.0000         0 ## [2,] 1.0376006    0.1954         0 ## [3,] 1.1813851    0.7812         0 ## [4,] 0.5882688    3.1250         0 ## [5,] 0.4666700   12.5000         0 ## [6,] 0.2869514   50.0000         0 fit <- bayesynergy(y,x) plot(fit) summary(fit) ##                 mean  se_mean     sd      2.5%       50%  97.5% n_eff  Rhat ## la_1[1]       0.3349 0.001656 0.0718  1.69e-01  3.45e-01  0.457  1878 1.000 ## la_2[1]       0.3884 0.003316 0.0578  2.09e-01  3.97e-01  0.457   303 1.012 ## log10_ec50_1  0.4795 0.003704 0.1524  2.37e-01  4.51e-01  0.841  1694 1.000 ## log10_ec50_2 -1.0445 0.049508 1.2312 -3.30e+00 -8.85e-01  0.489   618 1.005 ## slope_1       2.0171 0.017844 0.9022  8.81e-01  1.80e+00  4.330  2556 1.000 ## slope_2       1.4840 0.021399 1.0806  1.32e-01  1.21e+00  4.329  2550 1.000 ## ell           3.1276 0.040183 1.6303  1.24e+00  2.78e+00  7.015  1646 1.004 ## sigma_f       0.8420 0.016650 0.8033  1.68e-01  6.10e-01  2.736  2327 1.001 ## s             0.0971 0.000262 0.0152  7.24e-02  9.55e-02  0.132  3361 1.000 ## dss_1        33.4873 0.044498 2.9601  2.77e+01  3.35e+01 39.352  4425 0.999 ## dss_2        59.4708 0.041415 2.8112  5.36e+01  5.95e+01 64.932  4607 1.000 ## rVUS_f       82.7361 0.012960 0.8749  8.09e+01  8.28e+01 84.381  4557 1.001 ## rVUS_p0      73.0607 0.033201 2.2228  6.85e+01  7.31e+01 77.315  4482 1.000 ## VUS_Delta    -9.6754 0.037443 2.3948 -1.44e+01 -9.67e+00 -5.082  4091 1.000 ## VUS_syn      -9.7227 0.036766 2.3500 -1.45e+01 -9.69e+00 -5.332  4086 1.000 ## VUS_ant       0.0474 0.001892 0.1125  4.39e-06  8.28e-05  0.384  3536 1.000 ##  ## log-Pseudo Marginal Likelihood (LPML) =  52.06799"},{"path":"https://ocbe-uio.github.io/bayesynergy/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Leiv Rønneberg. Author, maintainer. Andrea Cremaschi. Author. Robert Hanes. Author. Chi Zhang. Author. Manuela Zucknick. Author.","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rønneberg L, Cremaschi , Hanes R, Zhang C, Zucknick M (2023). bayesynergy: Bayesian semi-parametric modelling -vitro drug combination experiments. R package version 2.5.1, https://ocbe-uio.github.io/bayesynergy/.","code":"@Manual{,   title = {bayesynergy: Bayesian semi-parametric modelling for in-vitro drug combination experiments},   author = {Leiv Rønneberg and Andrea Cremaschi and Robert Hanes and Chi Zhang and Manuela Zucknick},   year = {2023},   note = {R package version 2.5.1},   url = {https://ocbe-uio.github.io/bayesynergy/}, }"},{"path":"https://ocbe-uio.github.io/bayesynergy/index.html","id":"bayesynergy-flexible-bayesian-modelling-of-synergistic-interaction-effects-in-in-vitro-drug-combination-experiments","dir":"","previous_headings":"","what":"Bayesian semi-parametric modelling for in-vitro drug combination experiments","title":"Bayesian semi-parametric modelling for in-vitro drug combination experiments","text":"R package Bayesian semi-parametric modelling -vitro drug combination experiments   bayesynergy package implements Bayesian semi-parametric model drug combination experiment. efficient implementation Stan, model provides estimates full dose-response surface uncertainty quantification. posterior dose-response function, estimates synergy antagonism derived better reflect true uncertainty estimates. model handles incomplete messy datasets, naturally includes replicates, contains parallel processing large drug combination screens. Paper","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bayesian semi-parametric modelling for in-vitro drug combination experiments","text":"Prior installing package, please install RStan, make sure can run models . Stan requires configuration C++ toolchain, can tricky systems. Note macOS, XQuartz must installed plotting functions work properly.","code":"install.packages('devtools') library(devtools) install_github('ocbe-uio/bayesynergy', build_vignettes = T, build_opts = c(\"--no-resave-data\", \"--no-manual\"))"},{"path":"https://ocbe-uio.github.io/bayesynergy/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Bayesian semi-parametric modelling for in-vitro drug combination experiments","text":"Leiv Rønneberg, Andrea Cremaschi, Robert Hanes, Jorrit M Enserink, Manuela Zucknick, bayesynergy: flexible Bayesian modelling synergistic interaction effects vitro drug combination experiments, Briefings Bioinformatics, Volume 22, Issue 6, November 2021, bbab251, https://doi.org/10.1093/bib/bbab251","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/index.html","id":"updates","dir":"","previous_headings":"","what":"Updates","title":"Bayesian semi-parametric modelling for in-vitro drug combination experiments","text":"29-09-22: Updated version 2.5. Added new ‘robust’ likelihood, less sensitive outliers, particularly combined new penalized complexity (PC) prior Matérn kernel hyperparameters. Finally, changed default prior global noise term Inverse-gamma, half-Cauchy. 26-05-21: Updated version 2.4.1, minor notation changes. Ability calculate Bayes Factor comparing models without interaction 29-03-21: Updated version 2.4, minor tweaks priors, default settings plotting function. Added option set hyperparameters observation noise 13-01-21: Updated version 2.3, added new dataset use synergyscreen(), fixed bug synergyscreen() filling hard drive, added vignette 01-12-20: Updated version 2.2, added additional plotting functions synergyscreen() function, added heteroscedastic setting noise term, + minor improvements overall. 14-10-20: Updated version 2.1, removed Gibbs sampler, now compile easier Windows systems 27-08-20: Updated version 2.0, now running Stan! 03-03-20: Added support missing values! 14-04-20: Added option estimate lower asymptotes monotherapies","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/reference/BayeSyneRgy.html","id":null,"dir":"Reference","previous_headings":"","what":"bayesynergy — bayesynergy","title":"bayesynergy — bayesynergy","text":"function bayesynergy main function bayesynergy package. fit Bayesian semi-parametric model -vitro drug combination experiments estimate synergistic antagonistic effects.","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/reference/BayeSyneRgy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"bayesynergy — bayesynergy","text":"","code":"bayesynergy(   y,   x,   type = 3,   drug_names = NULL,   experiment_ID = NULL,   units = NULL,   lower_asymptotes = T,   heteroscedastic = T,   bayes_factor = F,   robust = F,   rho = 0.9,   pcprior = F,   pcprior_hypers = c(1, 0.1, 1, 0.2),   lambda = 0.005,   nu = 1.5,   method = \"sampling\",   control = list(),   ... )"},{"path":"https://ocbe-uio.github.io/bayesynergy/reference/BayeSyneRgy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"bayesynergy — bayesynergy","text":"y vector matrix viability measures. Replicates can given long wide format. x two-column matrix drug concentrations. type integer; type model used. Must one following: 1 (Splines), 2 (GP squared exponential kernel), 3 (GP Matérn kernel) 4 (GP rational quadratic kernel). drug_names vector size 2; names drugs utilized experiment. experiment_ID character; identifier experiment, typically name cell Line. units vector size 2; concentration units drugs, e.g. c(\"\\(\\mu\\)M\",\"\\(\\mu\\)M\") lower_asymptotes logical; TRUE model estimate lower asymptotes monotherapy curves. heteroscedastic logical; TRUE, model assume heteroscedastic measurement error. bayes_factor logical; TRUE, Bayes factor computed full model, model containing non-interaction surface. robust logical: TRUE, model assumes log-Pareto-tailed Normal (LPTN) distribution rho numeric: rho hyperparameter robust likelihood distribution pcprior logical: TRUE, model uses penalized complexity (PC) prior kernel hyperparameters Matérn kernel (type=3) pcprior_hypers vector size 4 giving hyperparameters PC prior Matérn hyperparameters lambda numeric; parameter controls residual noise observed heteroscedastic model f = 0. nu numeric; nu parameter Matérn kernel. Must one (0.5, 1.5, 2.5) method method estimation. Must one `sampling`,`vb` corresponding full sampling, variational Bayes. control list; passed stan sampler, e.g. setting adapt_delta. ... Arguments passed rstan::sampling rstan::vb (e.g. iter, chains).","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/reference/BayeSyneRgy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"bayesynergy — bayesynergy","text":"object S3 class \"bayesynergy\", list following entries","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/reference/BayeSyneRgy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"bayesynergy — bayesynergy","text":"","code":"if (FALSE) { library(bayesynergy) data(\"mathews_DLBCL\") y_mat <- mathews_DLBCL$`ispinesib + ibrutinib`[[1]] x_mat <- mathews_DLBCL$`ispinesib + ibrutinib`[[2]] fit <- bayesynergy(y_mat,x_mat) }"},{"path":"https://ocbe-uio.github.io/bayesynergy/reference/ONeil_A375.html","id":null,"dir":"Reference","previous_headings":"","what":"A drug combination dataset — ONeil_A375","title":"A drug combination dataset — ONeil_A375","text":"example dataset large drug combination screening experiment, -375 human melanoma cell line.","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/reference/ONeil_A375.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A drug combination dataset — ONeil_A375","text":"","code":"data(ONeil_A375)"},{"path":"https://ocbe-uio.github.io/bayesynergy/reference/ONeil_A375.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A drug combination dataset — ONeil_A375","text":"synergyscreen object, consisting initial run 583 drug combinations -375 human melanoma cell line. Contains dataframe summary statistics 581 experiments, list containing two experiments failed process.","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/reference/ONeil_A375.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A drug combination dataset — ONeil_A375","text":"O'Neil J, Benita Y, Feldman , Chenard M, Roberts B, Liu Y, Li J, Kral , Lejnine S, Loboda , Arthur W, Cristescu R, Haines BB, Winter C, Zhang T, Bloecher , Shumway SD. Unbiased Oncology Compound Screen Identify Novel Combination Strategies. Mol Cancer Ther. 2016 Jun;15(6):1155-62. doi: 10.1158/1535-7163.MCT-15-0843. Epub 2016 Mar 16. PMID: 26983881.","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/reference/mathews_DLBCL.html","id":null,"dir":"Reference","previous_headings":"","what":"A drug combination dataset — mathews_DLBCL","title":"A drug combination dataset — mathews_DLBCL","text":"example dataset large drug combination screening experiment, treatment diffuse large B-cell lymphoma.","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/reference/mathews_DLBCL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A drug combination dataset — mathews_DLBCL","text":"","code":"data(mathews_DLBCL)"},{"path":"https://ocbe-uio.github.io/bayesynergy/reference/mathews_DLBCL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A drug combination dataset — mathews_DLBCL","text":"list containing two distinct dataset experiment. list element list two elemnts: matrix viability scores, matrix corresponding concentrations. data adapted data provided synergyfinder R package.","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/reference/mathews_DLBCL.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A drug combination dataset — mathews_DLBCL","text":"Mathews Griner LA, Guha R, Shinn P, et al. High-throughput combinatorial screening identifies drugs cooperate ibrutinib kill activated B-cell-like diffuse large B-cell lymphoma cells. Proc Natl Acad Sci U S . 2014;111(6):2349–2354. L, Kulesskiy E, Saarela J, Turunen L, Wennerberg K, Aittokallio T, et al. (2018) Methods High-throughput Drug Combination Screening Synergy Scoring. : von Stechow L, editor. Cancer Systems Biology: Methods Protocols. New York, NY: Springer New York. P351-98.","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/reference/plot.bayesynergy.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function for a bayesynergy object — plot.bayesynergy","title":"Plot function for a bayesynergy object — plot.bayesynergy","text":"function plotting synergy surfaces summary statistics bayesynergy object.","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/reference/plot.bayesynergy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function for a bayesynergy object — plot.bayesynergy","text":"","code":"# S3 method for bayesynergy plot(x, plot3D = T, save_plots = FALSE, path = NULL, plotdevice = \"pdf\", ...)"},{"path":"https://ocbe-uio.github.io/bayesynergy/reference/plot.bayesynergy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function for a bayesynergy object — plot.bayesynergy","text":"x object class bayesynergy, result bayesynergy. plot3D logical; TRUE, interactive 3D surface plots dose response function displayed. save_plots logical; TRUE plots saved locally. path string; path saving plots, NULL defaults work directory. plotdevice string; device saving plots locally, must 'pdf' 'png' ... arguments passed device plotting, useful setting width height saved plots.","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/reference/plot.bayesynergy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot function for a bayesynergy object — plot.bayesynergy","text":"function extends plot draw response interaction surfaces fitted model. three-dimensional interactive plots, two-dimensional contour plots can displayed.","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/reference/plot.bayesynergy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot function for a bayesynergy object — plot.bayesynergy","text":"","code":"if (FALSE) { library(bayesynergy) data(\"mathews_DLBCL\") y_mat <- mathews_DLBCL$`ispinesib + ibrutinib`[[1]] x_mat <- mathews_DLBCL$`ispinesib + ibrutinib`[[2]] fit <- bayesynergy(y_mat,x_mat) plot(fit) }"},{"path":"https://ocbe-uio.github.io/bayesynergy/reference/plot.synergyscreen.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function for a synergyscreen object — plot.synergyscreen","title":"Plot function for a synergyscreen object — plot.synergyscreen","text":"function plotting summary statistics synergyscreen object.","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/reference/plot.synergyscreen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function for a synergyscreen object — plot.synergyscreen","text":"","code":"# S3 method for synergyscreen plot(   x,   groupbyExperimentID = T,   save_plots = FALSE,   path = NULL,   plotdevice = \"pdf\",   ... )"},{"path":"https://ocbe-uio.github.io/bayesynergy/reference/plot.synergyscreen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function for a synergyscreen object — plot.synergyscreen","text":"x object class synergyscreen, result synergyscreen. groupbyExperimentID logical; TRUE, individual plots produced per experiment ID. save_plots logical; TRUE plots saved locally. path string; path saving plots, NULL defaults work directory. plotdevice string; device saving plots locally, must 'pdf' 'png' ... arguments passed device plotting, useful setting width height saved plots.","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/reference/plot.synergyscreen.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot function for a synergyscreen object — plot.synergyscreen","text":"function extends plot summarize results large screens.","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/reference/plot.synergyscreen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot function for a synergyscreen object — plot.synergyscreen","text":"","code":"if (FALSE) { library(bayesynergy) data(\"mathews_DLBCL\") experiment1 = list(y = mathews_DLBCL[[1]][[1]], x = mathews_DLBCL[[1]][[2]], drug_names = c(\"ispinesib\",\"ibrutinib\")) experiment2 = list(y = mathews_DLBCL[[2]][[1]], x = mathews_DLBCL[[2]][[2]], drug_names = c(\"canertinib\",\"ibrutinib\")) experiments = list(experiment1,experiment2) fit <- synergyscreen(experiments) plot(fit) }"},{"path":"https://ocbe-uio.github.io/bayesynergy/reference/summary.bayesynergy.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary function for bayesynergy object — summary.bayesynergy","title":"Summary function for bayesynergy object — summary.bayesynergy","text":"function summarizing posterior inference bayesynergy object.","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/reference/summary.bayesynergy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary function for bayesynergy object — summary.bayesynergy","text":"","code":"# S3 method for bayesynergy summary(object, ...)"},{"path":"https://ocbe-uio.github.io/bayesynergy/reference/summary.bayesynergy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary function for bayesynergy object — summary.bayesynergy","text":"object fitted model summarise, bayesynergy. ... arguments passed methods.","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/reference/summary.bayesynergy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary function for bayesynergy object — summary.bayesynergy","text":"","code":"if (FALSE) { library(bayesynergy) data(\"mathews_DLBCL\") y_mat <- mathews_DLBCL$`ispinesib + ibrutinib`[[1]] x_mat <- mathews_DLBCL$`ispinesib + ibrutinib`[[2]] fit <- bayesynergy(y_mat,x_mat) summary(fit) }"},{"path":"https://ocbe-uio.github.io/bayesynergy/reference/synergyscreen.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for fitting high-througput drug combination screens with parallel processing — synergyscreen","title":"Function for fitting high-througput drug combination screens with parallel processing — synergyscreen","text":"function synergyscreen allows fitting high-throughput drug combination screens parallel processing","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/reference/synergyscreen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for fitting high-througput drug combination screens with parallel processing — synergyscreen","text":"","code":"synergyscreen(   experiments,   return_samples = F,   save_raw = T,   save_plots = T,   path = NULL,   parallel = T,   max_cores = NULL,   max_retries = 3,   plot_params = list(),   bayesynergy_params = list() )"},{"path":"https://ocbe-uio.github.io/bayesynergy/reference/synergyscreen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for fitting high-througput drug combination screens with parallel processing — synergyscreen","text":"experiments list experiments obtained high-throughput screen. See *Details* information structure element. return_samples logical; TRUE, function returns full fitted bayesynergy object. save_raw logical; TRUE, raw bayesynergy object saved individual experiment. save_plots logical; TRUE, plots individual experiment saved. path string; path saving output plot individual experiment. parallel logical; TRUE, parallel processing utilized run screen. max_cores integer; maximum number cores utilize parallel processing. max_retries integer; maximum number retries utilized model fit. plot_params list; parameters passed plotting function. See plot.bayesynergy details. bayesynergy_params list; parameters passed bayesynergy function. See bayesynergy details.","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/reference/synergyscreen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function for fitting high-througput drug combination screens with parallel processing — synergyscreen","text":"list containing two elements","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/reference/synergyscreen.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function for fitting high-througput drug combination screens with parallel processing — synergyscreen","text":"elements experiments must lists following elements","code":""},{"path":"https://ocbe-uio.github.io/bayesynergy/reference/synergyscreen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function for fitting high-througput drug combination screens with parallel processing — synergyscreen","text":"","code":"if (FALSE) { library(bayesynergy) data(\"mathews_DLBCL\") experiment1 = list(y = mathews_DLBCL[[1]][[1]], x = mathews_DLBCL[[1]][[2]], drug_names = c(\"ispinesib\",\"ibrutinib\")) experiment2 = list(y = mathews_DLBCL[[2]][[1]], x = mathews_DLBCL[[2]][[2]], drug_names = c(\"canertinib\",\"ibrutinib\")) experiments = list(experiment1,experiment2) fit <- synergyscreen(experiments) }"}]
