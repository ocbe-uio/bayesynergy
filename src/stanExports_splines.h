// Generated by rstantools.  Do not edit by hand.

/*
    bayesynergy is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bayesynergy is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bayesynergy.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_splines_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_splines");
    reader.add_event(347, 345, "end", "model_splines");
    return reader;
}
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, Eigen::Dynamic>
kron_mvprod(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& A,
                const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& B,
                const Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic>& V, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 6;
        return stan::math::promote_scalar<fun_return_scalar_t__>(transpose(multiply(A, transpose(multiply(B, V)))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct kron_mvprod_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& A,
                const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& B,
                const Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic>& V, std::ostream* pstream__) const {
        return kron_mvprod(A, B, V, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
build_b_spline(const std::vector<T0__>& t,
                   const std::vector<T1__>& ext_knots,
                   const int& ind,
                   const int& order, std::ostream* pstream__);
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
build_b_spline(const std::vector<T0__>& t,
                   const std::vector<T1__>& ext_knots,
                   const int& ind,
                   const int& order, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 17;
        validate_non_negative_index("b_spline", "size(t)", size(t));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b_spline(size(t));
        stan::math::initialize(b_spline, DUMMY_VAR__);
        stan::math::fill(b_spline, DUMMY_VAR__);
        current_statement_begin__ = 18;
        validate_non_negative_index("w1", "size(t)", size(t));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> w1(size(t));
        stan::math::initialize(w1, DUMMY_VAR__);
        stan::math::fill(w1, DUMMY_VAR__);
        stan::math::assign(w1,rep_vector(0, size(t)));
        current_statement_begin__ = 19;
        validate_non_negative_index("w2", "size(t)", size(t));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> w2(size(t));
        stan::math::initialize(w2, DUMMY_VAR__);
        stan::math::fill(w2, DUMMY_VAR__);
        stan::math::assign(w2,rep_vector(0, size(t)));
        current_statement_begin__ = 20;
        if (as_bool(logical_eq(order, 1))) {
            current_statement_begin__ = 21;
            for (int i = 1; i <= size(t); ++i) {
                current_statement_begin__ = 22;
                stan::model::assign(b_spline, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (primitive_value(logical_lte(get_base1(ext_knots, ind, "ext_knots", 1), get_base1(t, i, "t", 1))) && primitive_value(logical_lt(get_base1(t, i, "t", 1), get_base1(ext_knots, (ind + 1), "ext_knots", 1)))), 
                            "assigning variable b_spline");
            }
        } else {
            current_statement_begin__ = 24;
            if (as_bool(logical_neq(get_base1(ext_knots, ind, "ext_knots", 1), get_base1(ext_knots, ((ind + order) - 1), "ext_knots", 1)))) {
                current_statement_begin__ = 25;
                stan::math::assign(w1, divide(subtract(to_vector(t), rep_vector(get_base1(ext_knots, ind, "ext_knots", 1), size(t))), (get_base1(ext_knots, ((ind + order) - 1), "ext_knots", 1) - get_base1(ext_knots, ind, "ext_knots", 1))));
            }
            current_statement_begin__ = 27;
            if (as_bool(logical_neq(get_base1(ext_knots, (ind + 1), "ext_knots", 1), get_base1(ext_knots, (ind + order), "ext_knots", 1)))) {
                current_statement_begin__ = 28;
                stan::math::assign(w2, subtract(1, divide(subtract(to_vector(t), rep_vector(get_base1(ext_knots, (ind + 1), "ext_knots", 1), size(t))), (get_base1(ext_knots, (ind + order), "ext_knots", 1) - get_base1(ext_knots, (ind + 1), "ext_knots", 1)))));
            }
            current_statement_begin__ = 31;
            stan::math::assign(b_spline, add(elt_multiply(w1, build_b_spline(t, ext_knots, ind, (order - 1), pstream__)), elt_multiply(w2, build_b_spline(t, ext_knots, (ind + 1), (order - 1), pstream__))));
        }
        current_statement_begin__ = 34;
        return stan::math::promote_scalar<fun_return_scalar_t__>(b_spline);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct build_b_spline_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const std::vector<T0__>& t,
                   const std::vector<T1__>& ext_knots,
                   const int& ind,
                   const int& order, std::ostream* pstream__) const {
        return build_b_spline(t, ext_knots, ind, order, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_splines
  : public stan::model::model_base_crtp<model_splines> {
private:
        int n1;
        int n2;
        int n_knots1;
        int n_knots2;
        int degree;
        int nmissing;
        int nrep;
        vector_d y;
        std::vector<int> ii_obs;
        std::vector<double> x1;
        std::vector<double> x2;
        vector_d t1;
        vector_d t2;
        int est_la;
        int est_delta;
        int heteroscedastic;
        double lambda;
        int N;
        int num_basis1;
        matrix_d B1;
        int num_basis2;
        matrix_d B2;
        std::vector<std::vector<matrix_d> > B;
        matrix_d U;
        matrix_d V;
        matrix_d L_cov1;
        matrix_d L_cov2;
public:
    model_splines(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_splines(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_splines_namespace::model_splines";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 38;
            context__.validate_dims("data initialization", "n1", "int", context__.to_vec());
            n1 = int(0);
            vals_i__ = context__.vals_i("n1");
            pos__ = 0;
            n1 = vals_i__[pos__++];
            check_greater_or_equal(function__, "n1", n1, 1);
            current_statement_begin__ = 39;
            context__.validate_dims("data initialization", "n2", "int", context__.to_vec());
            n2 = int(0);
            vals_i__ = context__.vals_i("n2");
            pos__ = 0;
            n2 = vals_i__[pos__++];
            check_greater_or_equal(function__, "n2", n2, 1);
            current_statement_begin__ = 40;
            context__.validate_dims("data initialization", "n_knots1", "int", context__.to_vec());
            n_knots1 = int(0);
            vals_i__ = context__.vals_i("n_knots1");
            pos__ = 0;
            n_knots1 = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_knots1", n_knots1, 1);
            current_statement_begin__ = 41;
            context__.validate_dims("data initialization", "n_knots2", "int", context__.to_vec());
            n_knots2 = int(0);
            vals_i__ = context__.vals_i("n_knots2");
            pos__ = 0;
            n_knots2 = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_knots2", n_knots2, 1);
            current_statement_begin__ = 42;
            context__.validate_dims("data initialization", "degree", "int", context__.to_vec());
            degree = int(0);
            vals_i__ = context__.vals_i("degree");
            pos__ = 0;
            degree = vals_i__[pos__++];
            current_statement_begin__ = 43;
            context__.validate_dims("data initialization", "nmissing", "int", context__.to_vec());
            nmissing = int(0);
            vals_i__ = context__.vals_i("nmissing");
            pos__ = 0;
            nmissing = vals_i__[pos__++];
            check_greater_or_equal(function__, "nmissing", nmissing, 0);
            current_statement_begin__ = 44;
            context__.validate_dims("data initialization", "nrep", "int", context__.to_vec());
            nrep = int(0);
            vals_i__ = context__.vals_i("nrep");
            pos__ = 0;
            nrep = vals_i__[pos__++];
            check_greater_or_equal(function__, "nrep", nrep, 1);
            current_statement_begin__ = 45;
            validate_non_negative_index("y", "(((((n1 + n2) + (n1 * n2)) + 1) * nrep) - nmissing)", (((((n1 + n2) + (n1 * n2)) + 1) * nrep) - nmissing));
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec((((((n1 + n2) + (n1 * n2)) + 1) * nrep) - nmissing)));
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>((((((n1 + n2) + (n1 * n2)) + 1) * nrep) - nmissing));
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = (((((n1 + n2) + (n1 * n2)) + 1) * nrep) - nmissing);
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                y(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 46;
            validate_non_negative_index("ii_obs", "(((((n1 + n2) + (n1 * n2)) + 1) * nrep) - nmissing)", (((((n1 + n2) + (n1 * n2)) + 1) * nrep) - nmissing));
            context__.validate_dims("data initialization", "ii_obs", "int", context__.to_vec((((((n1 + n2) + (n1 * n2)) + 1) * nrep) - nmissing)));
            ii_obs = std::vector<int>((((((n1 + n2) + (n1 * n2)) + 1) * nrep) - nmissing), int(0));
            vals_i__ = context__.vals_i("ii_obs");
            pos__ = 0;
            size_t ii_obs_k_0_max__ = (((((n1 + n2) + (n1 * n2)) + 1) * nrep) - nmissing);
            for (size_t k_0__ = 0; k_0__ < ii_obs_k_0_max__; ++k_0__) {
                ii_obs[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 47;
            validate_non_negative_index("x1", "n1", n1);
            context__.validate_dims("data initialization", "x1", "double", context__.to_vec(n1));
            x1 = std::vector<double>(n1, double(0));
            vals_r__ = context__.vals_r("x1");
            pos__ = 0;
            size_t x1_k_0_max__ = n1;
            for (size_t k_0__ = 0; k_0__ < x1_k_0_max__; ++k_0__) {
                x1[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 48;
            validate_non_negative_index("x2", "n2", n2);
            context__.validate_dims("data initialization", "x2", "double", context__.to_vec(n2));
            x2 = std::vector<double>(n2, double(0));
            vals_r__ = context__.vals_r("x2");
            pos__ = 0;
            size_t x2_k_0_max__ = n2;
            for (size_t k_0__ = 0; k_0__ < x2_k_0_max__; ++k_0__) {
                x2[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 49;
            validate_non_negative_index("t1", "n_knots1", n_knots1);
            context__.validate_dims("data initialization", "t1", "vector_d", context__.to_vec(n_knots1));
            t1 = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_knots1);
            vals_r__ = context__.vals_r("t1");
            pos__ = 0;
            size_t t1_j_1_max__ = n_knots1;
            for (size_t j_1__ = 0; j_1__ < t1_j_1_max__; ++j_1__) {
                t1(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 50;
            validate_non_negative_index("t2", "n_knots2", n_knots2);
            context__.validate_dims("data initialization", "t2", "vector_d", context__.to_vec(n_knots2));
            t2 = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_knots2);
            vals_r__ = context__.vals_r("t2");
            pos__ = 0;
            size_t t2_j_1_max__ = n_knots2;
            for (size_t j_1__ = 0; j_1__ < t2_j_1_max__; ++j_1__) {
                t2(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 51;
            context__.validate_dims("data initialization", "est_la", "int", context__.to_vec());
            est_la = int(0);
            vals_i__ = context__.vals_i("est_la");
            pos__ = 0;
            est_la = vals_i__[pos__++];
            current_statement_begin__ = 52;
            context__.validate_dims("data initialization", "est_delta", "int", context__.to_vec());
            est_delta = int(0);
            vals_i__ = context__.vals_i("est_delta");
            pos__ = 0;
            est_delta = vals_i__[pos__++];
            current_statement_begin__ = 53;
            context__.validate_dims("data initialization", "heteroscedastic", "int", context__.to_vec());
            heteroscedastic = int(0);
            vals_i__ = context__.vals_i("heteroscedastic");
            pos__ = 0;
            heteroscedastic = vals_i__[pos__++];
            current_statement_begin__ = 54;
            context__.validate_dims("data initialization", "lambda", "double", context__.to_vec());
            lambda = double(0);
            vals_r__ = context__.vals_r("lambda");
            pos__ = 0;
            lambda = vals_r__[pos__++];
            // initialize transformed data variables
            current_statement_begin__ = 57;
            N = int(0);
            stan::math::fill(N, std::numeric_limits<int>::min());
            stan::math::assign(N,(((((n1 + n2) + (n1 * n2)) + 1) * nrep) - nmissing));
            current_statement_begin__ = 60;
            num_basis1 = int(0);
            stan::math::fill(num_basis1, std::numeric_limits<int>::min());
            stan::math::assign(num_basis1,((n_knots1 + degree) - 1));
            current_statement_begin__ = 61;
            validate_non_negative_index("B1", "num_basis1", num_basis1);
            validate_non_negative_index("B1", "n1", n1);
            B1 = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(num_basis1, n1);
            stan::math::fill(B1, DUMMY_VAR__);
            current_statement_begin__ = 62;
            num_basis2 = int(0);
            stan::math::fill(num_basis2, std::numeric_limits<int>::min());
            stan::math::assign(num_basis2,((n_knots2 + degree) - 1));
            current_statement_begin__ = 63;
            validate_non_negative_index("B2", "num_basis2", num_basis2);
            validate_non_negative_index("B2", "n2", n2);
            B2 = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(num_basis2, n2);
            stan::math::fill(B2, DUMMY_VAR__);
            current_statement_begin__ = 65;
            validate_non_negative_index("B", "num_basis2", num_basis2);
            validate_non_negative_index("B", "num_basis1", num_basis1);
            validate_non_negative_index("B", "n2", n2);
            validate_non_negative_index("B", "n1", n1);
            B = std::vector<std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > >(n2, std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >(n1, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(num_basis2, num_basis1)));
            stan::math::fill(B, DUMMY_VAR__);
            current_statement_begin__ = 67;
            validate_non_negative_index("U", "num_basis1", num_basis1);
            validate_non_negative_index("U", "num_basis1", num_basis1);
            U = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(num_basis1, num_basis1);
            stan::math::fill(U, DUMMY_VAR__);
            stan::math::assign(U,multiply(2, diag_matrix(rep_vector(1, num_basis1))));
            current_statement_begin__ = 68;
            validate_non_negative_index("V", "num_basis2", num_basis2);
            validate_non_negative_index("V", "num_basis2", num_basis2);
            V = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(num_basis2, num_basis2);
            stan::math::fill(V, DUMMY_VAR__);
            stan::math::assign(V,multiply(2, diag_matrix(rep_vector(1, num_basis2))));
            current_statement_begin__ = 70;
            validate_non_negative_index("L_cov1", "num_basis1", num_basis1);
            validate_non_negative_index("L_cov1", "num_basis1", num_basis1);
            L_cov1 = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(num_basis1, num_basis1);
            stan::math::fill(L_cov1, DUMMY_VAR__);
            current_statement_begin__ = 71;
            validate_non_negative_index("L_cov2", "num_basis2", num_basis2);
            validate_non_negative_index("L_cov2", "num_basis2", num_basis2);
            L_cov2 = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(num_basis2, num_basis2);
            stan::math::fill(L_cov2, DUMMY_VAR__);
            // execute transformed data statements
            {
            current_statement_begin__ = 76;
            validate_non_negative_index("ext_knots_temp1", "(degree + n_knots1)", (degree + n_knots1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> ext_knots_temp1((degree + n_knots1));
            stan::math::initialize(ext_knots_temp1, DUMMY_VAR__);
            stan::math::fill(ext_knots_temp1, DUMMY_VAR__);
            current_statement_begin__ = 77;
            validate_non_negative_index("ext_knots1", "((2 * degree) + n_knots1)", ((2 * degree) + n_knots1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> ext_knots1(((2 * degree) + n_knots1));
            stan::math::initialize(ext_knots1, DUMMY_VAR__);
            stan::math::fill(ext_knots1, DUMMY_VAR__);
            current_statement_begin__ = 78;
            validate_non_negative_index("ext_knots_temp2", "(degree + n_knots2)", (degree + n_knots2));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> ext_knots_temp2((degree + n_knots2));
            stan::math::initialize(ext_knots_temp2, DUMMY_VAR__);
            stan::math::fill(ext_knots_temp2, DUMMY_VAR__);
            current_statement_begin__ = 79;
            validate_non_negative_index("ext_knots2", "((2 * degree) + n_knots2)", ((2 * degree) + n_knots2));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> ext_knots2(((2 * degree) + n_knots2));
            stan::math::initialize(ext_knots2, DUMMY_VAR__);
            stan::math::fill(ext_knots2, DUMMY_VAR__);
            current_statement_begin__ = 80;
            stan::math::assign(ext_knots_temp1, append_row(rep_vector(get_base1(t1, 1, "t1", 1), degree), t1));
            current_statement_begin__ = 81;
            stan::math::assign(ext_knots1, append_row(ext_knots_temp1, rep_vector(get_base1(t1, n_knots1, "t1", 1), degree)));
            current_statement_begin__ = 82;
            stan::math::assign(ext_knots_temp2, append_row(rep_vector(get_base1(t2, 1, "t2", 1), degree), t2));
            current_statement_begin__ = 83;
            stan::math::assign(ext_knots2, append_row(ext_knots_temp2, rep_vector(get_base1(t2, n_knots2, "t2", 1), degree)));
            current_statement_begin__ = 84;
            for (int i = 1; i <= num_basis1; ++i) {
                current_statement_begin__ = 85;
                stan::model::assign(B1, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            to_row_vector(build_b_spline(x1, to_array_1d(ext_knots1), i, (degree + 1), pstream__)), 
                            "assigning variable B1");
            }
            current_statement_begin__ = 87;
            for (int i = 1; i <= num_basis2; ++i) {
                current_statement_begin__ = 88;
                stan::model::assign(B2, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            to_row_vector(build_b_spline(x2, to_array_1d(ext_knots2), i, (degree + 1), pstream__)), 
                            "assigning variable B2");
            }
            current_statement_begin__ = 90;
            stan::model::assign(B1, 
                        stan::model::cons_list(stan::model::index_uni(((n_knots1 + degree) - 1)), stan::model::cons_list(stan::model::index_uni(n1), stan::model::nil_index_list())), 
                        1, 
                        "assigning variable B1");
            current_statement_begin__ = 91;
            stan::model::assign(B2, 
                        stan::model::cons_list(stan::model::index_uni(((n_knots2 + degree) - 1)), stan::model::cons_list(stan::model::index_uni(n2), stan::model::nil_index_list())), 
                        1, 
                        "assigning variable B2");
            current_statement_begin__ = 93;
            for (int i = 2; i <= num_basis1; ++i) {
                current_statement_begin__ = 94;
                stan::model::assign(U, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni((i - 1)), stan::model::nil_index_list())), 
                            -(1), 
                            "assigning variable U");
            }
            current_statement_begin__ = 96;
            for (int i = 1; i <= (num_basis1 - 1); ++i) {
                current_statement_begin__ = 97;
                stan::model::assign(U, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni((i + 1)), stan::model::nil_index_list())), 
                            -(1), 
                            "assigning variable U");
            }
            current_statement_begin__ = 99;
            for (int i = 2; i <= num_basis2; ++i) {
                current_statement_begin__ = 100;
                stan::model::assign(V, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni((i - 1)), stan::model::nil_index_list())), 
                            -(1), 
                            "assigning variable V");
            }
            current_statement_begin__ = 102;
            for (int i = 1; i <= (num_basis2 - 1); ++i) {
                current_statement_begin__ = 103;
                stan::model::assign(V, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni((i + 1)), stan::model::nil_index_list())), 
                            -(1), 
                            "assigning variable V");
            }
            current_statement_begin__ = 106;
            for (int i = 1; i <= n2; ++i) {
                current_statement_begin__ = 107;
                for (int j = 1; j <= n1; ++j) {
                    current_statement_begin__ = 108;
                    stan::model::assign(B, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())))), 
                                multiply(stan::model::rvalue(B2, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "B2"), transpose(stan::model::rvalue(B1, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), "B1"))), 
                                "assigning variable B");
                }
            }
            }
            current_statement_begin__ = 114;
            stan::math::assign(L_cov1, cholesky_decompose(U));
            current_statement_begin__ = 115;
            stan::math::assign(L_cov2, cholesky_decompose(V));
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 119;
            validate_non_negative_index("la_1", "(est_la ? 1 : 0 )", (est_la ? 1 : 0 ));
            num_params_r__ += (1 * (est_la ? 1 : 0 ));
            current_statement_begin__ = 120;
            validate_non_negative_index("la_2", "(est_la ? 1 : 0 )", (est_la ? 1 : 0 ));
            num_params_r__ += (1 * (est_la ? 1 : 0 ));
            current_statement_begin__ = 121;
            num_params_r__ += 1;
            current_statement_begin__ = 122;
            num_params_r__ += 1;
            current_statement_begin__ = 123;
            num_params_r__ += 1;
            current_statement_begin__ = 124;
            num_params_r__ += 1;
            current_statement_begin__ = 125;
            num_params_r__ += 1;
            current_statement_begin__ = 126;
            num_params_r__ += 1;
            current_statement_begin__ = 129;
            num_params_r__ += 1;
            current_statement_begin__ = 130;
            num_params_r__ += 1;
            current_statement_begin__ = 131;
            num_params_r__ += 1;
            current_statement_begin__ = 132;
            num_params_r__ += 1;
            current_statement_begin__ = 133;
            num_params_r__ += 1;
            current_statement_begin__ = 136;
            validate_non_negative_index("z", "num_basis2", num_basis2);
            validate_non_negative_index("z", "num_basis1", num_basis1);
            num_params_r__ += (num_basis2 * num_basis1);
            current_statement_begin__ = 140;
            num_params_r__ += 1;
            current_statement_begin__ = 141;
            num_params_r__ += 1;
            current_statement_begin__ = 142;
            num_params_r__ += 1;
            current_statement_begin__ = 143;
            num_params_r__ += 1;
            current_statement_begin__ = 144;
            num_params_r__ += 1;
            current_statement_begin__ = 145;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_splines() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 119;
        if (!(context__.contains_r("la_1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable la_1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("la_1");
        pos__ = 0U;
        validate_non_negative_index("la_1", "(est_la ? 1 : 0 )", (est_la ? 1 : 0 ));
        context__.validate_dims("parameter initialization", "la_1", "double", context__.to_vec((est_la ? 1 : 0 )));
        std::vector<double> la_1((est_la ? 1 : 0 ), double(0));
        size_t la_1_k_0_max__ = (est_la ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < la_1_k_0_max__; ++k_0__) {
            la_1[k_0__] = vals_r__[pos__++];
        }
        size_t la_1_i_0_max__ = (est_la ? 1 : 0 );
        for (size_t i_0__ = 0; i_0__ < la_1_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, 1, la_1[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable la_1: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 120;
        if (!(context__.contains_r("la_2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable la_2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("la_2");
        pos__ = 0U;
        validate_non_negative_index("la_2", "(est_la ? 1 : 0 )", (est_la ? 1 : 0 ));
        context__.validate_dims("parameter initialization", "la_2", "double", context__.to_vec((est_la ? 1 : 0 )));
        std::vector<double> la_2((est_la ? 1 : 0 ), double(0));
        size_t la_2_k_0_max__ = (est_la ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < la_2_k_0_max__; ++k_0__) {
            la_2[k_0__] = vals_r__[pos__++];
        }
        size_t la_2_i_0_max__ = (est_la ? 1 : 0 );
        for (size_t i_0__ = 0; i_0__ < la_2_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, 1, la_2[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable la_2: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 121;
        if (!(context__.contains_r("log10_ec50_1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log10_ec50_1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log10_ec50_1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "log10_ec50_1", "double", context__.to_vec());
        double log10_ec50_1(0);
        log10_ec50_1 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(log10_ec50_1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log10_ec50_1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 122;
        if (!(context__.contains_r("log10_ec50_2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log10_ec50_2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log10_ec50_2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "log10_ec50_2", "double", context__.to_vec());
        double log10_ec50_2(0);
        log10_ec50_2 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(log10_ec50_2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log10_ec50_2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 123;
        if (!(context__.contains_r("theta_1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta_1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta_1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "theta_1", "double", context__.to_vec());
        double theta_1(0);
        theta_1 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(theta_1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta_1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 124;
        if (!(context__.contains_r("theta_2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta_2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta_2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "theta_2", "double", context__.to_vec());
        double theta_2(0);
        theta_2 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(theta_2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta_2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 125;
        if (!(context__.contains_r("slope_1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable slope_1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("slope_1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "slope_1", "double", context__.to_vec());
        double slope_1(0);
        slope_1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, slope_1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable slope_1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 126;
        if (!(context__.contains_r("slope_2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable slope_2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("slope_2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "slope_2", "double", context__.to_vec());
        double slope_2(0);
        slope_2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, slope_2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable slope_2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 129;
        if (!(context__.contains_r("gamma0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "gamma0", "double", context__.to_vec());
        double gamma0(0);
        gamma0 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(gamma0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 130;
        if (!(context__.contains_r("gamma1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "gamma1", "double", context__.to_vec());
        double gamma1(0);
        gamma1 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(gamma1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 131;
        if (!(context__.contains_r("gamma2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "gamma2", "double", context__.to_vec());
        double gamma2(0);
        gamma2 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(gamma2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 132;
        if (!(context__.contains_r("b1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "b1", "double", context__.to_vec());
        double b1(0);
        b1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, b1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 133;
        if (!(context__.contains_r("b2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "b2", "double", context__.to_vec());
        double b2(0);
        b2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, b2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 136;
        if (!(context__.contains_r("z")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable z missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("z");
        pos__ = 0U;
        validate_non_negative_index("z", "num_basis2", num_basis2);
        validate_non_negative_index("z", "num_basis1", num_basis1);
        context__.validate_dims("parameter initialization", "z", "matrix_d", context__.to_vec(num_basis2,num_basis1));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> z(num_basis2, num_basis1);
        size_t z_j_2_max__ = num_basis1;
        size_t z_j_1_max__ = num_basis2;
        for (size_t j_2__ = 0; j_2__ < z_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_j_1_max__; ++j_1__) {
                z(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(z);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable z: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 140;
        if (!(context__.contains_r("s")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable s missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("s");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "s", "double", context__.to_vec());
        double s(0);
        s = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, s);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable s: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 141;
        if (!(context__.contains_r("s2_log10_ec50_1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable s2_log10_ec50_1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("s2_log10_ec50_1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "s2_log10_ec50_1", "double", context__.to_vec());
        double s2_log10_ec50_1(0);
        s2_log10_ec50_1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, s2_log10_ec50_1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable s2_log10_ec50_1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 142;
        if (!(context__.contains_r("s2_log10_ec50_2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable s2_log10_ec50_2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("s2_log10_ec50_2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "s2_log10_ec50_2", "double", context__.to_vec());
        double s2_log10_ec50_2(0);
        s2_log10_ec50_2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, s2_log10_ec50_2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable s2_log10_ec50_2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 143;
        if (!(context__.contains_r("s2_gamma0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable s2_gamma0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("s2_gamma0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "s2_gamma0", "double", context__.to_vec());
        double s2_gamma0(0);
        s2_gamma0 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, s2_gamma0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable s2_gamma0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 144;
        if (!(context__.contains_r("s2_gamma1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable s2_gamma1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("s2_gamma1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "s2_gamma1", "double", context__.to_vec());
        double s2_gamma1(0);
        s2_gamma1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, s2_gamma1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable s2_gamma1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 145;
        if (!(context__.contains_r("s2_gamma2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable s2_gamma2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("s2_gamma2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "s2_gamma2", "double", context__.to_vec());
        double s2_gamma2(0);
        s2_gamma2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, s2_gamma2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable s2_gamma2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 119;
            std::vector<local_scalar_t__> la_1;
            size_t la_1_d_0_max__ = (est_la ? 1 : 0 );
            la_1.reserve(la_1_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < la_1_d_0_max__; ++d_0__) {
                if (jacobian__)
                    la_1.push_back(in__.scalar_lub_constrain(0, 1, lp__));
                else
                    la_1.push_back(in__.scalar_lub_constrain(0, 1));
            }
            current_statement_begin__ = 120;
            std::vector<local_scalar_t__> la_2;
            size_t la_2_d_0_max__ = (est_la ? 1 : 0 );
            la_2.reserve(la_2_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < la_2_d_0_max__; ++d_0__) {
                if (jacobian__)
                    la_2.push_back(in__.scalar_lub_constrain(0, 1, lp__));
                else
                    la_2.push_back(in__.scalar_lub_constrain(0, 1));
            }
            current_statement_begin__ = 121;
            local_scalar_t__ log10_ec50_1;
            (void) log10_ec50_1;  // dummy to suppress unused var warning
            if (jacobian__)
                log10_ec50_1 = in__.scalar_constrain(lp__);
            else
                log10_ec50_1 = in__.scalar_constrain();
            current_statement_begin__ = 122;
            local_scalar_t__ log10_ec50_2;
            (void) log10_ec50_2;  // dummy to suppress unused var warning
            if (jacobian__)
                log10_ec50_2 = in__.scalar_constrain(lp__);
            else
                log10_ec50_2 = in__.scalar_constrain();
            current_statement_begin__ = 123;
            local_scalar_t__ theta_1;
            (void) theta_1;  // dummy to suppress unused var warning
            if (jacobian__)
                theta_1 = in__.scalar_constrain(lp__);
            else
                theta_1 = in__.scalar_constrain();
            current_statement_begin__ = 124;
            local_scalar_t__ theta_2;
            (void) theta_2;  // dummy to suppress unused var warning
            if (jacobian__)
                theta_2 = in__.scalar_constrain(lp__);
            else
                theta_2 = in__.scalar_constrain();
            current_statement_begin__ = 125;
            local_scalar_t__ slope_1;
            (void) slope_1;  // dummy to suppress unused var warning
            if (jacobian__)
                slope_1 = in__.scalar_lb_constrain(0, lp__);
            else
                slope_1 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 126;
            local_scalar_t__ slope_2;
            (void) slope_2;  // dummy to suppress unused var warning
            if (jacobian__)
                slope_2 = in__.scalar_lb_constrain(0, lp__);
            else
                slope_2 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 129;
            local_scalar_t__ gamma0;
            (void) gamma0;  // dummy to suppress unused var warning
            if (jacobian__)
                gamma0 = in__.scalar_constrain(lp__);
            else
                gamma0 = in__.scalar_constrain();
            current_statement_begin__ = 130;
            local_scalar_t__ gamma1;
            (void) gamma1;  // dummy to suppress unused var warning
            if (jacobian__)
                gamma1 = in__.scalar_constrain(lp__);
            else
                gamma1 = in__.scalar_constrain();
            current_statement_begin__ = 131;
            local_scalar_t__ gamma2;
            (void) gamma2;  // dummy to suppress unused var warning
            if (jacobian__)
                gamma2 = in__.scalar_constrain(lp__);
            else
                gamma2 = in__.scalar_constrain();
            current_statement_begin__ = 132;
            local_scalar_t__ b1;
            (void) b1;  // dummy to suppress unused var warning
            if (jacobian__)
                b1 = in__.scalar_lb_constrain(0, lp__);
            else
                b1 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 133;
            local_scalar_t__ b2;
            (void) b2;  // dummy to suppress unused var warning
            if (jacobian__)
                b2 = in__.scalar_lb_constrain(0, lp__);
            else
                b2 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 136;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> z;
            (void) z;  // dummy to suppress unused var warning
            if (jacobian__)
                z = in__.matrix_constrain(num_basis2, num_basis1, lp__);
            else
                z = in__.matrix_constrain(num_basis2, num_basis1);
            current_statement_begin__ = 140;
            local_scalar_t__ s;
            (void) s;  // dummy to suppress unused var warning
            if (jacobian__)
                s = in__.scalar_lb_constrain(0, lp__);
            else
                s = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 141;
            local_scalar_t__ s2_log10_ec50_1;
            (void) s2_log10_ec50_1;  // dummy to suppress unused var warning
            if (jacobian__)
                s2_log10_ec50_1 = in__.scalar_lb_constrain(0, lp__);
            else
                s2_log10_ec50_1 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 142;
            local_scalar_t__ s2_log10_ec50_2;
            (void) s2_log10_ec50_2;  // dummy to suppress unused var warning
            if (jacobian__)
                s2_log10_ec50_2 = in__.scalar_lb_constrain(0, lp__);
            else
                s2_log10_ec50_2 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 143;
            local_scalar_t__ s2_gamma0;
            (void) s2_gamma0;  // dummy to suppress unused var warning
            if (jacobian__)
                s2_gamma0 = in__.scalar_lb_constrain(0, lp__);
            else
                s2_gamma0 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 144;
            local_scalar_t__ s2_gamma1;
            (void) s2_gamma1;  // dummy to suppress unused var warning
            if (jacobian__)
                s2_gamma1 = in__.scalar_lb_constrain(0, lp__);
            else
                s2_gamma1 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 145;
            local_scalar_t__ s2_gamma2;
            (void) s2_gamma2;  // dummy to suppress unused var warning
            if (jacobian__)
                s2_gamma2 = in__.scalar_lb_constrain(0, lp__);
            else
                s2_gamma2 = in__.scalar_lb_constrain(0);
            // transformed parameters
            current_statement_begin__ = 148;
            validate_non_negative_index("p0", "n2", n2);
            validate_non_negative_index("p0", "n1", n1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> p0(n2, n1);
            stan::math::initialize(p0, DUMMY_VAR__);
            stan::math::fill(p0, DUMMY_VAR__);
            current_statement_begin__ = 149;
            validate_non_negative_index("p01", "n1", n1);
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> p01(n1);
            stan::math::initialize(p01, DUMMY_VAR__);
            stan::math::fill(p01, DUMMY_VAR__);
            current_statement_begin__ = 150;
            validate_non_negative_index("p02", "n2", n2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p02(n2);
            stan::math::initialize(p02, DUMMY_VAR__);
            stan::math::fill(p02, DUMMY_VAR__);
            current_statement_begin__ = 151;
            validate_non_negative_index("Delta", "n2", n2);
            validate_non_negative_index("Delta", "n1", n1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Delta(n2, n1);
            stan::math::initialize(Delta, DUMMY_VAR__);
            stan::math::fill(Delta, DUMMY_VAR__);
            current_statement_begin__ = 152;
            validate_non_negative_index("C", "num_basis2", num_basis2);
            validate_non_negative_index("C", "num_basis1", num_basis1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> C(num_basis2, num_basis1);
            stan::math::initialize(C, DUMMY_VAR__);
            stan::math::fill(C, DUMMY_VAR__);
            // transformed parameters block statements
            {
            current_statement_begin__ = 156;
            local_scalar_t__ la_1_param(DUMMY_VAR__);
            (void) la_1_param;  // dummy to suppress unused var warning
            stan::math::initialize(la_1_param, DUMMY_VAR__);
            stan::math::fill(la_1_param, DUMMY_VAR__);
            current_statement_begin__ = 157;
            local_scalar_t__ la_2_param(DUMMY_VAR__);
            (void) la_2_param;  // dummy to suppress unused var warning
            stan::math::initialize(la_2_param, DUMMY_VAR__);
            stan::math::fill(la_2_param, DUMMY_VAR__);
            current_statement_begin__ = 159;
            validate_non_negative_index("Q", "n2", n2);
            validate_non_negative_index("Q", "n1", n1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Q(n2, n1);
            stan::math::initialize(Q, DUMMY_VAR__);
            stan::math::fill(Q, DUMMY_VAR__);
            current_statement_begin__ = 161;
            stan::math::assign(C, kron_mvprod(L_cov1, L_cov2, z, pstream__));
            current_statement_begin__ = 163;
            if (as_bool(est_la)) {
                current_statement_begin__ = 164;
                stan::math::assign(la_1_param, get_base1(la_1, 1, "la_1", 1));
                current_statement_begin__ = 165;
                stan::math::assign(la_2_param, get_base1(la_2, 1, "la_2", 1));
            } else {
                current_statement_begin__ = 167;
                stan::math::assign(la_1_param, 0);
                current_statement_begin__ = 168;
                stan::math::assign(la_2_param, 0);
            }
            current_statement_begin__ = 171;
            for (int j = 1; j <= n1; ++j) {
                current_statement_begin__ = 172;
                stan::model::assign(p01, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (la_1_param + ((1 - la_1_param) / (1 + pow(10, (slope_1 * (get_base1(x1, j, "x1", 1) - log10_ec50_1)))))), 
                            "assigning variable p01");
                current_statement_begin__ = 173;
                for (int i = 1; i <= n2; ++i) {
                    current_statement_begin__ = 174;
                    stan::model::assign(p02, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (la_2_param + ((1 - la_2_param) / (1 + pow(10, (slope_2 * (get_base1(x2, i, "x2", 1) - log10_ec50_2)))))), 
                                "assigning variable p02");
                    current_statement_begin__ = 175;
                    stan::model::assign(p0, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (get_base1(p01, j, "p01", 1) * get_base1(p02, i, "p02", 1)), 
                                "assigning variable p0");
                    current_statement_begin__ = 176;
                    stan::model::assign(Q, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (((gamma0 + (gamma1 * get_base1(x1, j, "x1", 1))) + (gamma2 * get_base1(x2, i, "x2", 1))) + sum(elt_multiply(C, stan::model::rvalue(B, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())))), "B")))), 
                                "assigning variable Q");
                    current_statement_begin__ = 177;
                    stan::model::assign(Delta, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                ((-(get_base1(p0, i, j, "p0", 1)) / (1 + stan::math::exp((b1 * get_base1(Q, i, j, "Q", 1))))) + ((1 - get_base1(p0, i, j, "p0", 1)) / (1 + stan::math::exp((-(b2) * get_base1(Q, i, j, "Q", 1)))))), 
                                "assigning variable Delta");
                }
            }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 148;
            size_t p0_j_1_max__ = n2;
            size_t p0_j_2_max__ = n1;
            for (size_t j_1__ = 0; j_1__ < p0_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < p0_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(p0(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: p0" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p0: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            check_greater_or_equal(function__, "p0", p0, 0);
            check_less_or_equal(function__, "p0", p0, 1);
            current_statement_begin__ = 149;
            size_t p01_j_1_max__ = n1;
            for (size_t j_1__ = 0; j_1__ < p01_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(p01(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: p01" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p01: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "p01", p01, 0);
            check_less_or_equal(function__, "p01", p01, 1);
            current_statement_begin__ = 150;
            size_t p02_j_1_max__ = n2;
            for (size_t j_1__ = 0; j_1__ < p02_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(p02(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: p02" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p02: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "p02", p02, 0);
            check_less_or_equal(function__, "p02", p02, 1);
            current_statement_begin__ = 151;
            size_t Delta_j_1_max__ = n2;
            size_t Delta_j_2_max__ = n1;
            for (size_t j_1__ = 0; j_1__ < Delta_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < Delta_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(Delta(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: Delta" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Delta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            check_greater_or_equal(function__, "Delta", Delta, -(1));
            check_less_or_equal(function__, "Delta", Delta, 1);
            current_statement_begin__ = 152;
            size_t C_j_1_max__ = num_basis2;
            size_t C_j_2_max__ = num_basis1;
            for (size_t j_1__ = 0; j_1__ < C_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < C_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(C(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: C" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable C: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            // model body
            {
            current_statement_begin__ = 184;
            validate_non_negative_index("f", "(n2 + 1)", (n2 + 1));
            validate_non_negative_index("f", "(n1 + 1)", (n1 + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> f((n2 + 1), (n1 + 1));
            stan::math::initialize(f, DUMMY_VAR__);
            stan::math::fill(f, DUMMY_VAR__);
            current_statement_begin__ = 185;
            validate_non_negative_index("fobs", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> fobs(N);
            stan::math::initialize(fobs, DUMMY_VAR__);
            stan::math::fill(fobs, DUMMY_VAR__);
            current_statement_begin__ = 186;
            validate_non_negative_index("noise", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> noise(N);
            stan::math::initialize(noise, DUMMY_VAR__);
            stan::math::fill(noise, DUMMY_VAR__);
            current_statement_begin__ = 187;
            stan::model::assign(f, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        1, 
                        "assigning variable f");
            current_statement_begin__ = 188;
            stan::model::assign(f, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_min_max(2, (n1 + 1)), stan::model::nil_index_list())), 
                        p01, 
                        "assigning variable f");
            current_statement_begin__ = 189;
            stan::model::assign(f, 
                        stan::model::cons_list(stan::model::index_min_max(2, (n2 + 1)), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        p02, 
                        "assigning variable f");
            current_statement_begin__ = 190;
            if (as_bool(est_delta)) {
                current_statement_begin__ = 191;
                stan::model::assign(f, 
                            stan::model::cons_list(stan::model::index_min_max(2, (n2 + 1)), stan::model::cons_list(stan::model::index_min_max(2, (n1 + 1)), stan::model::nil_index_list())), 
                            add(p0, Delta), 
                            "assigning variable f");
            } else {
                current_statement_begin__ = 193;
                stan::model::assign(f, 
                            stan::model::cons_list(stan::model::index_min_max(2, (n2 + 1)), stan::model::cons_list(stan::model::index_min_max(2, (n1 + 1)), stan::model::nil_index_list())), 
                            p0, 
                            "assigning variable f");
            }
            current_statement_begin__ = 197;
            lp_accum__.add(inv_gamma_log<propto__>(s, 5, 1));
            current_statement_begin__ = 198;
            lp_accum__.add(inv_gamma_log<propto__>(s2_log10_ec50_1, 3, 2));
            current_statement_begin__ = 199;
            lp_accum__.add(inv_gamma_log<propto__>(s2_log10_ec50_2, 3, 2));
            current_statement_begin__ = 200;
            lp_accum__.add(inv_gamma_log<propto__>(s2_gamma0, 3, 2));
            current_statement_begin__ = 201;
            lp_accum__.add(inv_gamma_log<propto__>(s2_gamma1, 3, 2));
            current_statement_begin__ = 202;
            lp_accum__.add(inv_gamma_log<propto__>(s2_gamma2, 3, 2));
            current_statement_begin__ = 205;
            lp_accum__.add(beta_log<propto__>(la_1, .5, .5));
            current_statement_begin__ = 206;
            lp_accum__.add(beta_log<propto__>(la_2, .5, .5));
            current_statement_begin__ = 207;
            lp_accum__.add(gamma_log<propto__>(slope_1, 1, 1));
            current_statement_begin__ = 208;
            lp_accum__.add(gamma_log<propto__>(slope_2, 1, 1));
            current_statement_begin__ = 209;
            lp_accum__.add(normal_log<propto__>(theta_1, 0, 1));
            current_statement_begin__ = 210;
            lp_accum__.add(normal_log<propto__>(theta_2, 0, 1));
            current_statement_begin__ = 211;
            lp_accum__.add(normal_log<propto__>(log10_ec50_1, theta_1, stan::math::sqrt(s2_log10_ec50_1)));
            current_statement_begin__ = 212;
            lp_accum__.add(normal_log<propto__>(log10_ec50_2, theta_2, stan::math::sqrt(s2_log10_ec50_2)));
            current_statement_begin__ = 215;
            lp_accum__.add(normal_log<propto__>(gamma0, 0, stan::math::sqrt(s2_gamma0)));
            current_statement_begin__ = 216;
            lp_accum__.add(normal_log<propto__>(gamma1, 0, stan::math::sqrt(s2_gamma1)));
            current_statement_begin__ = 217;
            lp_accum__.add(normal_log<propto__>(gamma2, 0, stan::math::sqrt(s2_gamma2)));
            current_statement_begin__ = 218;
            lp_accum__.add(gamma_log<propto__>(b1, 1, 1));
            current_statement_begin__ = 219;
            lp_accum__.add(gamma_log<propto__>(b2, 1, 1));
            current_statement_begin__ = 222;
            lp_accum__.add(std_normal_log<propto__>(to_vector(z)));
            current_statement_begin__ = 225;
            stan::math::assign(fobs, stan::model::rvalue(to_vector(f), stan::model::cons_list(stan::model::index_multi(ii_obs), stan::model::nil_index_list()), "to_vector(f)"));
            current_statement_begin__ = 226;
            stan::math::assign(noise, multiply(s, stan::math::sqrt(add(fobs, lambda))));
            current_statement_begin__ = 227;
            if (as_bool(heteroscedastic)) {
                current_statement_begin__ = 228;
                lp_accum__.add(normal_log<propto__>(y, fobs, noise));
            } else {
                current_statement_begin__ = 230;
                lp_accum__.add(normal_log<propto__>(y, fobs, s));
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("la_1");
        names__.push_back("la_2");
        names__.push_back("log10_ec50_1");
        names__.push_back("log10_ec50_2");
        names__.push_back("theta_1");
        names__.push_back("theta_2");
        names__.push_back("slope_1");
        names__.push_back("slope_2");
        names__.push_back("gamma0");
        names__.push_back("gamma1");
        names__.push_back("gamma2");
        names__.push_back("b1");
        names__.push_back("b2");
        names__.push_back("z");
        names__.push_back("s");
        names__.push_back("s2_log10_ec50_1");
        names__.push_back("s2_log10_ec50_2");
        names__.push_back("s2_gamma0");
        names__.push_back("s2_gamma1");
        names__.push_back("s2_gamma2");
        names__.push_back("p0");
        names__.push_back("p01");
        names__.push_back("p02");
        names__.push_back("Delta");
        names__.push_back("C");
        names__.push_back("ec50_1");
        names__.push_back("ec50_2");
        names__.push_back("CPO");
        names__.push_back("dss_1");
        names__.push_back("dss_2");
        names__.push_back("rVUS_f");
        names__.push_back("rVUS_p0");
        names__.push_back("VUS_Delta");
        names__.push_back("VUS_syn");
        names__.push_back("VUS_ant");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back((est_la ? 1 : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((est_la ? 1 : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_basis2);
        dims__.push_back(num_basis1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n2);
        dims__.push_back(n1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n2);
        dims__.push_back(n1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_basis2);
        dims__.push_back(num_basis1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_splines_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> la_1;
        size_t la_1_d_0_max__ = (est_la ? 1 : 0 );
        la_1.reserve(la_1_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < la_1_d_0_max__; ++d_0__) {
            la_1.push_back(in__.scalar_lub_constrain(0, 1));
        }
        size_t la_1_k_0_max__ = (est_la ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < la_1_k_0_max__; ++k_0__) {
            vars__.push_back(la_1[k_0__]);
        }
        std::vector<double> la_2;
        size_t la_2_d_0_max__ = (est_la ? 1 : 0 );
        la_2.reserve(la_2_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < la_2_d_0_max__; ++d_0__) {
            la_2.push_back(in__.scalar_lub_constrain(0, 1));
        }
        size_t la_2_k_0_max__ = (est_la ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < la_2_k_0_max__; ++k_0__) {
            vars__.push_back(la_2[k_0__]);
        }
        double log10_ec50_1 = in__.scalar_constrain();
        vars__.push_back(log10_ec50_1);
        double log10_ec50_2 = in__.scalar_constrain();
        vars__.push_back(log10_ec50_2);
        double theta_1 = in__.scalar_constrain();
        vars__.push_back(theta_1);
        double theta_2 = in__.scalar_constrain();
        vars__.push_back(theta_2);
        double slope_1 = in__.scalar_lb_constrain(0);
        vars__.push_back(slope_1);
        double slope_2 = in__.scalar_lb_constrain(0);
        vars__.push_back(slope_2);
        double gamma0 = in__.scalar_constrain();
        vars__.push_back(gamma0);
        double gamma1 = in__.scalar_constrain();
        vars__.push_back(gamma1);
        double gamma2 = in__.scalar_constrain();
        vars__.push_back(gamma2);
        double b1 = in__.scalar_lb_constrain(0);
        vars__.push_back(b1);
        double b2 = in__.scalar_lb_constrain(0);
        vars__.push_back(b2);
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> z = in__.matrix_constrain(num_basis2, num_basis1);
        size_t z_j_2_max__ = num_basis1;
        size_t z_j_1_max__ = num_basis2;
        for (size_t j_2__ = 0; j_2__ < z_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_j_1_max__; ++j_1__) {
                vars__.push_back(z(j_1__, j_2__));
            }
        }
        double s = in__.scalar_lb_constrain(0);
        vars__.push_back(s);
        double s2_log10_ec50_1 = in__.scalar_lb_constrain(0);
        vars__.push_back(s2_log10_ec50_1);
        double s2_log10_ec50_2 = in__.scalar_lb_constrain(0);
        vars__.push_back(s2_log10_ec50_2);
        double s2_gamma0 = in__.scalar_lb_constrain(0);
        vars__.push_back(s2_gamma0);
        double s2_gamma1 = in__.scalar_lb_constrain(0);
        vars__.push_back(s2_gamma1);
        double s2_gamma2 = in__.scalar_lb_constrain(0);
        vars__.push_back(s2_gamma2);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 148;
            validate_non_negative_index("p0", "n2", n2);
            validate_non_negative_index("p0", "n1", n1);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> p0(n2, n1);
            stan::math::initialize(p0, DUMMY_VAR__);
            stan::math::fill(p0, DUMMY_VAR__);
            current_statement_begin__ = 149;
            validate_non_negative_index("p01", "n1", n1);
            Eigen::Matrix<double, 1, Eigen::Dynamic> p01(n1);
            stan::math::initialize(p01, DUMMY_VAR__);
            stan::math::fill(p01, DUMMY_VAR__);
            current_statement_begin__ = 150;
            validate_non_negative_index("p02", "n2", n2);
            Eigen::Matrix<double, Eigen::Dynamic, 1> p02(n2);
            stan::math::initialize(p02, DUMMY_VAR__);
            stan::math::fill(p02, DUMMY_VAR__);
            current_statement_begin__ = 151;
            validate_non_negative_index("Delta", "n2", n2);
            validate_non_negative_index("Delta", "n1", n1);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Delta(n2, n1);
            stan::math::initialize(Delta, DUMMY_VAR__);
            stan::math::fill(Delta, DUMMY_VAR__);
            current_statement_begin__ = 152;
            validate_non_negative_index("C", "num_basis2", num_basis2);
            validate_non_negative_index("C", "num_basis1", num_basis1);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> C(num_basis2, num_basis1);
            stan::math::initialize(C, DUMMY_VAR__);
            stan::math::fill(C, DUMMY_VAR__);
            // do transformed parameters statements
            {
            current_statement_begin__ = 156;
            local_scalar_t__ la_1_param(DUMMY_VAR__);
            (void) la_1_param;  // dummy to suppress unused var warning
            stan::math::initialize(la_1_param, DUMMY_VAR__);
            stan::math::fill(la_1_param, DUMMY_VAR__);
            current_statement_begin__ = 157;
            local_scalar_t__ la_2_param(DUMMY_VAR__);
            (void) la_2_param;  // dummy to suppress unused var warning
            stan::math::initialize(la_2_param, DUMMY_VAR__);
            stan::math::fill(la_2_param, DUMMY_VAR__);
            current_statement_begin__ = 159;
            validate_non_negative_index("Q", "n2", n2);
            validate_non_negative_index("Q", "n1", n1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Q(n2, n1);
            stan::math::initialize(Q, DUMMY_VAR__);
            stan::math::fill(Q, DUMMY_VAR__);
            current_statement_begin__ = 161;
            stan::math::assign(C, kron_mvprod(L_cov1, L_cov2, z, pstream__));
            current_statement_begin__ = 163;
            if (as_bool(est_la)) {
                current_statement_begin__ = 164;
                stan::math::assign(la_1_param, get_base1(la_1, 1, "la_1", 1));
                current_statement_begin__ = 165;
                stan::math::assign(la_2_param, get_base1(la_2, 1, "la_2", 1));
            } else {
                current_statement_begin__ = 167;
                stan::math::assign(la_1_param, 0);
                current_statement_begin__ = 168;
                stan::math::assign(la_2_param, 0);
            }
            current_statement_begin__ = 171;
            for (int j = 1; j <= n1; ++j) {
                current_statement_begin__ = 172;
                stan::model::assign(p01, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (la_1_param + ((1 - la_1_param) / (1 + pow(10, (slope_1 * (get_base1(x1, j, "x1", 1) - log10_ec50_1)))))), 
                            "assigning variable p01");
                current_statement_begin__ = 173;
                for (int i = 1; i <= n2; ++i) {
                    current_statement_begin__ = 174;
                    stan::model::assign(p02, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (la_2_param + ((1 - la_2_param) / (1 + pow(10, (slope_2 * (get_base1(x2, i, "x2", 1) - log10_ec50_2)))))), 
                                "assigning variable p02");
                    current_statement_begin__ = 175;
                    stan::model::assign(p0, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (get_base1(p01, j, "p01", 1) * get_base1(p02, i, "p02", 1)), 
                                "assigning variable p0");
                    current_statement_begin__ = 176;
                    stan::model::assign(Q, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (((gamma0 + (gamma1 * get_base1(x1, j, "x1", 1))) + (gamma2 * get_base1(x2, i, "x2", 1))) + sum(elt_multiply(C, stan::model::rvalue(B, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())))), "B")))), 
                                "assigning variable Q");
                    current_statement_begin__ = 177;
                    stan::model::assign(Delta, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                ((-(get_base1(p0, i, j, "p0", 1)) / (1 + stan::math::exp((b1 * get_base1(Q, i, j, "Q", 1))))) + ((1 - get_base1(p0, i, j, "p0", 1)) / (1 + stan::math::exp((-(b2) * get_base1(Q, i, j, "Q", 1)))))), 
                                "assigning variable Delta");
                }
            }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 148;
            check_greater_or_equal(function__, "p0", p0, 0);
            check_less_or_equal(function__, "p0", p0, 1);
            current_statement_begin__ = 149;
            check_greater_or_equal(function__, "p01", p01, 0);
            check_less_or_equal(function__, "p01", p01, 1);
            current_statement_begin__ = 150;
            check_greater_or_equal(function__, "p02", p02, 0);
            check_less_or_equal(function__, "p02", p02, 1);
            current_statement_begin__ = 151;
            check_greater_or_equal(function__, "Delta", Delta, -(1));
            check_less_or_equal(function__, "Delta", Delta, 1);
            // write transformed parameters
            if (include_tparams__) {
                size_t p0_j_2_max__ = n1;
                size_t p0_j_1_max__ = n2;
                for (size_t j_2__ = 0; j_2__ < p0_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < p0_j_1_max__; ++j_1__) {
                        vars__.push_back(p0(j_1__, j_2__));
                    }
                }
                size_t p01_j_1_max__ = n1;
                for (size_t j_1__ = 0; j_1__ < p01_j_1_max__; ++j_1__) {
                    vars__.push_back(p01(j_1__));
                }
                size_t p02_j_1_max__ = n2;
                for (size_t j_1__ = 0; j_1__ < p02_j_1_max__; ++j_1__) {
                    vars__.push_back(p02(j_1__));
                }
                size_t Delta_j_2_max__ = n1;
                size_t Delta_j_1_max__ = n2;
                for (size_t j_2__ = 0; j_2__ < Delta_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < Delta_j_1_max__; ++j_1__) {
                        vars__.push_back(Delta(j_1__, j_2__));
                    }
                }
                size_t C_j_2_max__ = num_basis1;
                size_t C_j_1_max__ = num_basis2;
                for (size_t j_2__ = 0; j_2__ < C_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < C_j_1_max__; ++j_1__) {
                        vars__.push_back(C(j_1__, j_2__));
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 235;
            double ec50_1;
            (void) ec50_1;  // dummy to suppress unused var warning
            stan::math::initialize(ec50_1, DUMMY_VAR__);
            stan::math::fill(ec50_1, DUMMY_VAR__);
            current_statement_begin__ = 236;
            double ec50_2;
            (void) ec50_2;  // dummy to suppress unused var warning
            stan::math::initialize(ec50_2, DUMMY_VAR__);
            stan::math::fill(ec50_2, DUMMY_VAR__);
            current_statement_begin__ = 237;
            validate_non_negative_index("CPO", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> CPO(N);
            stan::math::initialize(CPO, DUMMY_VAR__);
            stan::math::fill(CPO, DUMMY_VAR__);
            stan::math::assign(CPO,rep_vector(0, N));
            current_statement_begin__ = 238;
            double dss_1;
            (void) dss_1;  // dummy to suppress unused var warning
            stan::math::initialize(dss_1, DUMMY_VAR__);
            stan::math::fill(dss_1, DUMMY_VAR__);
            stan::math::assign(dss_1,0);
            current_statement_begin__ = 239;
            double dss_2;
            (void) dss_2;  // dummy to suppress unused var warning
            stan::math::initialize(dss_2, DUMMY_VAR__);
            stan::math::fill(dss_2, DUMMY_VAR__);
            stan::math::assign(dss_2,0);
            current_statement_begin__ = 240;
            double rVUS_f;
            (void) rVUS_f;  // dummy to suppress unused var warning
            stan::math::initialize(rVUS_f, DUMMY_VAR__);
            stan::math::fill(rVUS_f, DUMMY_VAR__);
            stan::math::assign(rVUS_f,0);
            current_statement_begin__ = 241;
            double rVUS_p0;
            (void) rVUS_p0;  // dummy to suppress unused var warning
            stan::math::initialize(rVUS_p0, DUMMY_VAR__);
            stan::math::fill(rVUS_p0, DUMMY_VAR__);
            stan::math::assign(rVUS_p0,0);
            current_statement_begin__ = 242;
            double VUS_Delta;
            (void) VUS_Delta;  // dummy to suppress unused var warning
            stan::math::initialize(VUS_Delta, DUMMY_VAR__);
            stan::math::fill(VUS_Delta, DUMMY_VAR__);
            stan::math::assign(VUS_Delta,0);
            current_statement_begin__ = 243;
            double VUS_syn;
            (void) VUS_syn;  // dummy to suppress unused var warning
            stan::math::initialize(VUS_syn, DUMMY_VAR__);
            stan::math::fill(VUS_syn, DUMMY_VAR__);
            stan::math::assign(VUS_syn,0);
            current_statement_begin__ = 244;
            double VUS_ant;
            (void) VUS_ant;  // dummy to suppress unused var warning
            stan::math::initialize(VUS_ant, DUMMY_VAR__);
            stan::math::fill(VUS_ant, DUMMY_VAR__);
            stan::math::assign(VUS_ant,0);
            // generated quantities statements
            {
            current_statement_begin__ = 248;
            validate_non_negative_index("f", "(n2 + 1)", (n2 + 1));
            validate_non_negative_index("f", "(n1 + 1)", (n1 + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> f((n2 + 1), (n1 + 1));
            stan::math::initialize(f, DUMMY_VAR__);
            stan::math::fill(f, DUMMY_VAR__);
            current_statement_begin__ = 249;
            validate_non_negative_index("fc_interior", "n2", n2);
            validate_non_negative_index("fc_interior", "n1", n1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> fc_interior(n2, n1);
            stan::math::initialize(fc_interior, DUMMY_VAR__);
            stan::math::fill(fc_interior, DUMMY_VAR__);
            current_statement_begin__ = 250;
            validate_non_negative_index("fobs", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> fobs(N);
            stan::math::initialize(fobs, DUMMY_VAR__);
            stan::math::fill(fobs, DUMMY_VAR__);
            current_statement_begin__ = 251;
            validate_non_negative_index("noise", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> noise(N);
            stan::math::initialize(noise, DUMMY_VAR__);
            stan::math::fill(noise, DUMMY_VAR__);
            current_statement_begin__ = 252;
            local_scalar_t__ la_1_param(DUMMY_VAR__);
            (void) la_1_param;  // dummy to suppress unused var warning
            stan::math::initialize(la_1_param, DUMMY_VAR__);
            stan::math::fill(la_1_param, DUMMY_VAR__);
            current_statement_begin__ = 253;
            local_scalar_t__ la_2_param(DUMMY_VAR__);
            (void) la_2_param;  // dummy to suppress unused var warning
            stan::math::initialize(la_2_param, DUMMY_VAR__);
            stan::math::fill(la_2_param, DUMMY_VAR__);
            current_statement_begin__ = 254;
            local_scalar_t__ eps(DUMMY_VAR__);
            (void) eps;  // dummy to suppress unused var warning
            stan::math::initialize(eps, DUMMY_VAR__);
            stan::math::fill(eps, DUMMY_VAR__);
            stan::math::assign(eps,0.05);
            current_statement_begin__ = 255;
            local_scalar_t__ c11(DUMMY_VAR__);
            (void) c11;  // dummy to suppress unused var warning
            stan::math::initialize(c11, DUMMY_VAR__);
            stan::math::fill(c11, DUMMY_VAR__);
            stan::math::assign(c11,min(x1));
            current_statement_begin__ = 256;
            local_scalar_t__ c12(DUMMY_VAR__);
            (void) c12;  // dummy to suppress unused var warning
            stan::math::initialize(c12, DUMMY_VAR__);
            stan::math::fill(c12, DUMMY_VAR__);
            stan::math::assign(c12,max(x1));
            current_statement_begin__ = 257;
            local_scalar_t__ c21(DUMMY_VAR__);
            (void) c21;  // dummy to suppress unused var warning
            stan::math::initialize(c21, DUMMY_VAR__);
            stan::math::fill(c21, DUMMY_VAR__);
            stan::math::assign(c21,min(x2));
            current_statement_begin__ = 258;
            local_scalar_t__ c22(DUMMY_VAR__);
            (void) c22;  // dummy to suppress unused var warning
            stan::math::initialize(c22, DUMMY_VAR__);
            stan::math::fill(c22, DUMMY_VAR__);
            stan::math::assign(c22,max(x2));
            current_statement_begin__ = 259;
            validate_non_negative_index("B_rVUS", "n2", n2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> B_rVUS(n2);
            stan::math::initialize(B_rVUS, DUMMY_VAR__);
            stan::math::fill(B_rVUS, DUMMY_VAR__);
            current_statement_begin__ = 260;
            validate_non_negative_index("B_rVUS_p0", "n2", n2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> B_rVUS_p0(n2);
            stan::math::initialize(B_rVUS_p0, DUMMY_VAR__);
            stan::math::fill(B_rVUS_p0, DUMMY_VAR__);
            current_statement_begin__ = 261;
            validate_non_negative_index("B_Delta", "n2", n2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> B_Delta(n2);
            stan::math::initialize(B_Delta, DUMMY_VAR__);
            stan::math::fill(B_Delta, DUMMY_VAR__);
            current_statement_begin__ = 262;
            validate_non_negative_index("B_syn", "n2", n2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> B_syn(n2);
            stan::math::initialize(B_syn, DUMMY_VAR__);
            stan::math::fill(B_syn, DUMMY_VAR__);
            current_statement_begin__ = 263;
            validate_non_negative_index("B_ant", "n2", n2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> B_ant(n2);
            stan::math::initialize(B_ant, DUMMY_VAR__);
            stan::math::fill(B_ant, DUMMY_VAR__);
            current_statement_begin__ = 265;
            stan::model::assign(f, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        1, 
                        "assigning variable f");
            current_statement_begin__ = 266;
            stan::model::assign(f, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_min_max(2, (n1 + 1)), stan::model::nil_index_list())), 
                        p01, 
                        "assigning variable f");
            current_statement_begin__ = 267;
            stan::model::assign(f, 
                        stan::model::cons_list(stan::model::index_min_max(2, (n2 + 1)), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        p02, 
                        "assigning variable f");
            current_statement_begin__ = 268;
            if (as_bool(est_delta)) {
                current_statement_begin__ = 269;
                stan::model::assign(f, 
                            stan::model::cons_list(stan::model::index_min_max(2, (n2 + 1)), stan::model::cons_list(stan::model::index_min_max(2, (n1 + 1)), stan::model::nil_index_list())), 
                            add(p0, Delta), 
                            "assigning variable f");
            } else {
                current_statement_begin__ = 271;
                stan::model::assign(f, 
                            stan::model::cons_list(stan::model::index_min_max(2, (n2 + 1)), stan::model::cons_list(stan::model::index_min_max(2, (n1 + 1)), stan::model::nil_index_list())), 
                            p0, 
                            "assigning variable f");
            }
            current_statement_begin__ = 273;
            if (as_bool(est_delta)) {
                current_statement_begin__ = 274;
                stan::model::assign(fc_interior, 
                            stan::model::cons_list(stan::model::index_min_max(1, n2), stan::model::cons_list(stan::model::index_min_max(1, n1), stan::model::nil_index_list())), 
                            subtract(1, add(p0, Delta)), 
                            "assigning variable fc_interior");
            } else {
                current_statement_begin__ = 276;
                stan::model::assign(fc_interior, 
                            stan::model::cons_list(stan::model::index_min_max(1, n2), stan::model::cons_list(stan::model::index_min_max(1, n1), stan::model::nil_index_list())), 
                            subtract(1, p0), 
                            "assigning variable fc_interior");
            }
            current_statement_begin__ = 279;
            stan::math::assign(fobs, stan::model::rvalue(to_vector(f), stan::model::cons_list(stan::model::index_multi(ii_obs), stan::model::nil_index_list()), "to_vector(f)"));
            current_statement_begin__ = 280;
            stan::math::assign(noise, multiply(s, stan::math::sqrt(add(fobs, lambda))));
            current_statement_begin__ = 281;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 282;
                if (as_bool(heteroscedastic)) {
                    current_statement_begin__ = 283;
                    stan::model::assign(CPO, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                stan::math::exp(-(normal_log(get_base1(y, i, "y", 1), get_base1(fobs, i, "fobs", 1), get_base1(noise, i, "noise", 1)))), 
                                "assigning variable CPO");
                } else {
                    current_statement_begin__ = 285;
                    stan::model::assign(CPO, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                stan::math::exp(-(normal_log(get_base1(y, i, "y", 1), get_base1(fobs, i, "fobs", 1), s))), 
                                "assigning variable CPO");
                }
            }
            current_statement_begin__ = 289;
            stan::math::assign(ec50_1, pow(10, log10_ec50_1));
            current_statement_begin__ = 290;
            stan::math::assign(ec50_2, pow(10, log10_ec50_2));
            current_statement_begin__ = 292;
            if (as_bool(est_la)) {
                current_statement_begin__ = 293;
                stan::math::assign(la_1_param, get_base1(la_1, 1, "la_1", 1));
                current_statement_begin__ = 294;
                stan::math::assign(la_2_param, get_base1(la_2, 1, "la_2", 1));
            } else {
                current_statement_begin__ = 296;
                stan::math::assign(la_1_param, 0);
                current_statement_begin__ = 297;
                stan::math::assign(la_2_param, 0);
            }
            current_statement_begin__ = 300;
            stan::math::assign(dss_1, ((c12 - c11) + (((la_1_param - 1) / slope_1) * (stan::math::log10((1 + pow(10, (slope_1 * (c12 - log10_ec50_1))))) - stan::math::log10((1 + pow(10, (slope_1 * (c11 - log10_ec50_1)))))))));
            current_statement_begin__ = 301;
            stan::math::assign(dss_1, (100 * (1 - (dss_1 / (c12 - c11)))));
            current_statement_begin__ = 302;
            stan::math::assign(dss_2, ((c22 - c21) + (((la_2_param - 1) / slope_2) * (stan::math::log10((1 + pow(10, (slope_2 * (c22 - log10_ec50_2))))) - stan::math::log10((1 + pow(10, (slope_2 * (c21 - log10_ec50_2)))))))));
            current_statement_begin__ = 303;
            stan::math::assign(dss_2, (100 * (1 - (dss_2 / (c22 - c21)))));
            current_statement_begin__ = 307;
            for (int i = 1; i <= n2; ++i) {
                {
                current_statement_begin__ = 308;
                local_scalar_t__ b_rVUS(DUMMY_VAR__);
                (void) b_rVUS;  // dummy to suppress unused var warning
                stan::math::initialize(b_rVUS, DUMMY_VAR__);
                stan::math::fill(b_rVUS, DUMMY_VAR__);
                stan::math::assign(b_rVUS,0);
                current_statement_begin__ = 309;
                local_scalar_t__ b_rVUS_p0(DUMMY_VAR__);
                (void) b_rVUS_p0;  // dummy to suppress unused var warning
                stan::math::initialize(b_rVUS_p0, DUMMY_VAR__);
                stan::math::fill(b_rVUS_p0, DUMMY_VAR__);
                stan::math::assign(b_rVUS_p0,0);
                current_statement_begin__ = 310;
                local_scalar_t__ b_Delta(DUMMY_VAR__);
                (void) b_Delta;  // dummy to suppress unused var warning
                stan::math::initialize(b_Delta, DUMMY_VAR__);
                stan::math::fill(b_Delta, DUMMY_VAR__);
                stan::math::assign(b_Delta,0);
                current_statement_begin__ = 311;
                local_scalar_t__ b_syn(DUMMY_VAR__);
                (void) b_syn;  // dummy to suppress unused var warning
                stan::math::initialize(b_syn, DUMMY_VAR__);
                stan::math::fill(b_syn, DUMMY_VAR__);
                stan::math::assign(b_syn,0);
                current_statement_begin__ = 312;
                local_scalar_t__ b_ant(DUMMY_VAR__);
                (void) b_ant;  // dummy to suppress unused var warning
                stan::math::initialize(b_ant, DUMMY_VAR__);
                stan::math::fill(b_ant, DUMMY_VAR__);
                stan::math::assign(b_ant,0);
                current_statement_begin__ = 313;
                for (int j = 2; j <= n1; ++j) {
                    current_statement_begin__ = 314;
                    stan::math::assign(b_rVUS, (b_rVUS + (((get_base1(x1, j, "x1", 1) - get_base1(x1, (j - 1), "x1", 1)) * (get_base1(fc_interior, i, j, "fc_interior", 1) + get_base1(fc_interior, i, (j - 1), "fc_interior", 1))) / 2)));
                    current_statement_begin__ = 315;
                    stan::math::assign(b_rVUS_p0, (b_rVUS_p0 + (((get_base1(x1, j, "x1", 1) - get_base1(x1, (j - 1), "x1", 1)) * ((1 - get_base1(p0, i, j, "p0", 1)) + (1 - get_base1(p0, i, (j - 1), "p0", 1)))) / 2)));
                    current_statement_begin__ = 316;
                    stan::math::assign(b_Delta, (b_Delta + (((get_base1(x1, j, "x1", 1) - get_base1(x1, (j - 1), "x1", 1)) * (get_base1(Delta, i, j, "Delta", 1) + get_base1(Delta, i, (j - 1), "Delta", 1))) / 2)));
                    current_statement_begin__ = 317;
                    stan::math::assign(b_syn, (b_syn + (((get_base1(x1, j, "x1", 1) - get_base1(x1, (j - 1), "x1", 1)) * (stan::math::fmin(get_base1(Delta, i, j, "Delta", 1), 0) + stan::math::fmin(get_base1(Delta, i, (j - 1), "Delta", 1), 0))) / 2)));
                    current_statement_begin__ = 318;
                    stan::math::assign(b_ant, (b_ant + (((get_base1(x1, j, "x1", 1) - get_base1(x1, (j - 1), "x1", 1)) * (stan::math::fmax(get_base1(Delta, i, j, "Delta", 1), 0) + stan::math::fmax(get_base1(Delta, i, (j - 1), "Delta", 1), 0))) / 2)));
                }
                current_statement_begin__ = 320;
                stan::model::assign(B_rVUS, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            b_rVUS, 
                            "assigning variable B_rVUS");
                current_statement_begin__ = 321;
                stan::model::assign(B_rVUS_p0, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            b_rVUS_p0, 
                            "assigning variable B_rVUS_p0");
                current_statement_begin__ = 322;
                stan::model::assign(B_Delta, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            b_Delta, 
                            "assigning variable B_Delta");
                current_statement_begin__ = 323;
                stan::model::assign(B_syn, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            b_syn, 
                            "assigning variable B_syn");
                current_statement_begin__ = 324;
                stan::model::assign(B_ant, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            b_ant, 
                            "assigning variable B_ant");
                current_statement_begin__ = 325;
                if (as_bool(logical_gt(i, 1))) {
                    current_statement_begin__ = 326;
                    stan::math::assign(rVUS_f, (rVUS_f + (((get_base1(x2, i, "x2", 1) - get_base1(x2, (i - 1), "x2", 1)) * (get_base1(B_rVUS, i, "B_rVUS", 1) + get_base1(B_rVUS, (i - 1), "B_rVUS", 1))) / 2)));
                    current_statement_begin__ = 327;
                    stan::math::assign(rVUS_p0, (rVUS_p0 + (((get_base1(x2, i, "x2", 1) - get_base1(x2, (i - 1), "x2", 1)) * (get_base1(B_rVUS_p0, i, "B_rVUS_p0", 1) + get_base1(B_rVUS_p0, (i - 1), "B_rVUS_p0", 1))) / 2)));
                    current_statement_begin__ = 328;
                    stan::math::assign(VUS_Delta, (VUS_Delta + (((get_base1(x2, i, "x2", 1) - get_base1(x2, (i - 1), "x2", 1)) * (get_base1(B_Delta, i, "B_Delta", 1) + get_base1(B_Delta, (i - 1), "B_Delta", 1))) / 2)));
                    current_statement_begin__ = 329;
                    stan::math::assign(VUS_syn, (VUS_syn + (((get_base1(x2, i, "x2", 1) - get_base1(x2, (i - 1), "x2", 1)) * (get_base1(B_syn, i, "B_syn", 1) + get_base1(B_syn, (i - 1), "B_syn", 1))) / 2)));
                    current_statement_begin__ = 330;
                    stan::math::assign(VUS_ant, (VUS_ant + (((get_base1(x2, i, "x2", 1) - get_base1(x2, (i - 1), "x2", 1)) * (get_base1(B_ant, i, "B_ant", 1) + get_base1(B_ant, (i - 1), "B_ant", 1))) / 2)));
                }
                }
            }
            current_statement_begin__ = 334;
            stan::math::assign(rVUS_f, ((100 * rVUS_f) / ((max(x1) - min(x1)) * (max(x2) - min(x2)))));
            current_statement_begin__ = 335;
            stan::math::assign(rVUS_p0, ((100 * rVUS_p0) / ((max(x1) - min(x1)) * (max(x2) - min(x2)))));
            current_statement_begin__ = 336;
            stan::math::assign(VUS_Delta, ((100 * VUS_Delta) / ((max(x1) - min(x1)) * (max(x2) - min(x2)))));
            current_statement_begin__ = 337;
            stan::math::assign(VUS_syn, ((100 * VUS_syn) / ((max(x1) - min(x1)) * (max(x2) - min(x2)))));
            current_statement_begin__ = 338;
            stan::math::assign(VUS_ant, ((100 * VUS_ant) / ((max(x1) - min(x1)) * (max(x2) - min(x2)))));
            current_statement_begin__ = 340;
            if (as_bool(logical_eq(rVUS_f, 0))) {
                current_statement_begin__ = 340;
                stan::math::assign(rVUS_f, uniform_rng(1e-6, 1e-4, base_rng__));
            }
            current_statement_begin__ = 341;
            if (as_bool(logical_eq(rVUS_p0, 0))) {
                current_statement_begin__ = 341;
                stan::math::assign(rVUS_p0, uniform_rng(1e-6, 1e-4, base_rng__));
            }
            current_statement_begin__ = 342;
            if (as_bool(logical_eq(VUS_syn, 0))) {
                current_statement_begin__ = 342;
                stan::math::assign(VUS_syn, uniform_rng(1e-6, 1e-4, base_rng__));
            }
            current_statement_begin__ = 343;
            if (as_bool(logical_eq(VUS_ant, 0))) {
                current_statement_begin__ = 343;
                stan::math::assign(VUS_ant, uniform_rng(1e-6, 1e-4, base_rng__));
            }
            }
            // validate, write generated quantities
            current_statement_begin__ = 235;
            vars__.push_back(ec50_1);
            current_statement_begin__ = 236;
            vars__.push_back(ec50_2);
            current_statement_begin__ = 237;
            size_t CPO_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < CPO_j_1_max__; ++j_1__) {
                vars__.push_back(CPO(j_1__));
            }
            current_statement_begin__ = 238;
            vars__.push_back(dss_1);
            current_statement_begin__ = 239;
            vars__.push_back(dss_2);
            current_statement_begin__ = 240;
            vars__.push_back(rVUS_f);
            current_statement_begin__ = 241;
            vars__.push_back(rVUS_p0);
            current_statement_begin__ = 242;
            vars__.push_back(VUS_Delta);
            current_statement_begin__ = 243;
            vars__.push_back(VUS_syn);
            current_statement_begin__ = 244;
            vars__.push_back(VUS_ant);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_splines";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t la_1_k_0_max__ = (est_la ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < la_1_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "la_1" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t la_2_k_0_max__ = (est_la ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < la_2_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "la_2" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "log10_ec50_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "log10_ec50_2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "slope_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "slope_2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "gamma0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "gamma1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "gamma2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "b1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "b2";
        param_names__.push_back(param_name_stream__.str());
        size_t z_j_2_max__ = num_basis1;
        size_t z_j_1_max__ = num_basis2;
        for (size_t j_2__ = 0; j_2__ < z_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "s";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "s2_log10_ec50_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "s2_log10_ec50_2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "s2_gamma0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "s2_gamma1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "s2_gamma2";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t p0_j_2_max__ = n1;
            size_t p0_j_1_max__ = n2;
            for (size_t j_2__ = 0; j_2__ < p0_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < p0_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "p0" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t p01_j_1_max__ = n1;
            for (size_t j_1__ = 0; j_1__ < p01_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p01" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p02_j_1_max__ = n2;
            for (size_t j_1__ = 0; j_1__ < p02_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p02" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Delta_j_2_max__ = n1;
            size_t Delta_j_1_max__ = n2;
            for (size_t j_2__ = 0; j_2__ < Delta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Delta_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Delta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t C_j_2_max__ = num_basis1;
            size_t C_j_1_max__ = num_basis2;
            for (size_t j_2__ = 0; j_2__ < C_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < C_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "C" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "ec50_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ec50_2";
        param_names__.push_back(param_name_stream__.str());
        size_t CPO_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < CPO_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "CPO" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "dss_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "dss_2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rVUS_f";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rVUS_p0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "VUS_Delta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "VUS_syn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "VUS_ant";
        param_names__.push_back(param_name_stream__.str());
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t la_1_k_0_max__ = (est_la ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < la_1_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "la_1" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t la_2_k_0_max__ = (est_la ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < la_2_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "la_2" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "log10_ec50_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "log10_ec50_2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "slope_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "slope_2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "gamma0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "gamma1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "gamma2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "b1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "b2";
        param_names__.push_back(param_name_stream__.str());
        size_t z_j_2_max__ = num_basis1;
        size_t z_j_1_max__ = num_basis2;
        for (size_t j_2__ = 0; j_2__ < z_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "s";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "s2_log10_ec50_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "s2_log10_ec50_2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "s2_gamma0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "s2_gamma1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "s2_gamma2";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t p0_j_2_max__ = n1;
            size_t p0_j_1_max__ = n2;
            for (size_t j_2__ = 0; j_2__ < p0_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < p0_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "p0" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t p01_j_1_max__ = n1;
            for (size_t j_1__ = 0; j_1__ < p01_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p01" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p02_j_1_max__ = n2;
            for (size_t j_1__ = 0; j_1__ < p02_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p02" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Delta_j_2_max__ = n1;
            size_t Delta_j_1_max__ = n2;
            for (size_t j_2__ = 0; j_2__ < Delta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Delta_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Delta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t C_j_2_max__ = num_basis1;
            size_t C_j_1_max__ = num_basis2;
            for (size_t j_2__ = 0; j_2__ < C_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < C_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "C" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "ec50_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ec50_2";
        param_names__.push_back(param_name_stream__.str());
        size_t CPO_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < CPO_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "CPO" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "dss_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "dss_2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rVUS_f";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rVUS_p0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "VUS_Delta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "VUS_syn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "VUS_ant";
        param_names__.push_back(param_name_stream__.str());
    }
}; // model
}  // namespace
typedef model_splines_namespace::model_splines stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
